{"ast":null,"code":"import { TestMode, Language } from '../types';\n\n// Mock data\nconst mockWords = ['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog', 'pack', 'my', 'box', 'with', 'five', 'dozen', 'liquor', 'jugs', 'waltz', 'nymph', 'for', 'back', 'gloved', 'jinx', 'quip', 'heavy', 'dwarf', 'boxing', 'gym', 'quest', 'judging', 'vow', 'sphinx', 'of', 'black', 'quartz', 'judge', 'my', 'vow', 'how', 'vexingly', 'quick', 'daft', 'zebras', 'jump', 'bright', 'vixens', 'quickly', 'fudge', 'empathy', 'wizard', 'loving', 'just', 'big', 'quorum', 'fixed', 'jinxed', 'grumpy', 'style', 'when'];\nconst mockUser = {\n  id: '1',\n  username: 'testuser',\n  email: 'test@example.com',\n  firstName: 'Test',\n  lastName: 'User',\n  createdAt: new Date(),\n  updatedAt: new Date()\n};\nconst mockLeaderboard = [{\n  id: '1',\n  user: {\n    id: '1',\n    username: 'SpeedTyper',\n    profilePicture: undefined\n  },\n  wpm: 120,\n  accuracy: 98,\n  mode: TestMode.SIXTY_SECONDS,\n  completedAt: new Date()\n}, {\n  id: '2',\n  user: {\n    id: '2',\n    username: 'FastFingers',\n    profilePicture: undefined\n  },\n  wpm: 115,\n  accuracy: 96,\n  mode: TestMode.SIXTY_SECONDS,\n  completedAt: new Date()\n}, {\n  id: '3',\n  user: {\n    id: '3',\n    username: 'QuickKeys',\n    profilePicture: undefined\n  },\n  wpm: 110,\n  accuracy: 99,\n  mode: TestMode.SIXTY_SECONDS,\n  completedAt: new Date()\n}];\n\n// Use mock API when backend is not available\nconst USE_MOCK_API = process.env.REACT_APP_USE_MOCK_API === 'true' || !process.env.REACT_APP_API_URL;\nclass MockAPIClient {\n  constructor() {\n    this.isLoggedIn = false;\n    this.token = 'mock-jwt-token';\n  }\n  // Simulate API delay\n  delay(ms = 500) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  async login(credentials) {\n    await this.delay();\n    if (credentials.email === 'test@example.com' && credentials.password === 'password') {\n      this.isLoggedIn = true;\n      return {\n        ...mockUser,\n        token: this.token\n      };\n    }\n    throw new Error('Invalid email or password');\n  }\n  async register(userData) {\n    await this.delay();\n    this.isLoggedIn = true;\n    return {\n      ...mockUser,\n      username: userData.username,\n      email: userData.email,\n      firstName: userData.firstName,\n      lastName: userData.lastName,\n      token: this.token\n    };\n  }\n  async getCurrentUser() {\n    await this.delay();\n    if (!this.isLoggedIn) {\n      throw new Error('Not authenticated');\n    }\n    return mockUser;\n  }\n  getGoogleAuthUrl() {\n    return '#';\n  }\n  getGitHubAuthUrl() {\n    return '#';\n  }\n  async submitTypingTest(result) {\n    await this.delay();\n    return {\n      id: Date.now().toString(),\n      userId: mockUser.id,\n      completedAt: new Date(),\n      ...result\n    };\n  }\n  async getUserTests(limit) {\n    await this.delay();\n\n    // Return mock test results\n    return [{\n      id: '1',\n      userId: mockUser.id,\n      wpm: 85,\n      accuracy: 96,\n      charactersTyped: 150,\n      errorsCount: 6,\n      duration: 30,\n      mode: TestMode.THIRTY_SECONDS,\n      language: 'english',\n      text: 'Sample typing test text...',\n      completedAt: new Date(Date.now() - 86400000) // Yesterday\n    }, {\n      id: '2',\n      userId: mockUser.id,\n      wpm: 78,\n      accuracy: 94,\n      charactersTyped: 200,\n      errorsCount: 12,\n      duration: 60,\n      mode: TestMode.SIXTY_SECONDS,\n      language: 'english',\n      text: 'Another sample typing test text...',\n      completedAt: new Date(Date.now() - 172800000) // 2 days ago\n    }].slice(0, limit);\n  }\n  async getLeaderboard(mode, limit = 10) {\n    await this.delay();\n    return mockLeaderboard.filter(entry => entry.mode === mode).slice(0, limit);\n  }\n  async getWords(language = Language.ENGLISH, count = 50) {\n    await this.delay();\n    const shuffled = [...mockWords].sort(() => 0.5 - Math.random());\n    return {\n      words: shuffled.slice(0, Math.min(count, mockWords.length)),\n      language\n    };\n  }\n  async updateProfile(userData) {\n    await this.delay();\n    return {\n      ...mockUser,\n      ...userData,\n      updatedAt: new Date()\n    };\n  }\n  async getUserStats() {\n    await this.delay();\n    return {\n      averageWpm: 82,\n      averageAccuracy: 95,\n      testsCompleted: 15\n    };\n  }\n}\nexport const mockAPIClient = new MockAPIClient();\n\n// Export mock API methods\nexport const mockAuthAPI = {\n  login: mockAPIClient.login.bind(mockAPIClient),\n  register: mockAPIClient.register.bind(mockAPIClient),\n  getCurrentUser: mockAPIClient.getCurrentUser.bind(mockAPIClient),\n  getGoogleAuthUrl: mockAPIClient.getGoogleAuthUrl.bind(mockAPIClient),\n  getGitHubAuthUrl: mockAPIClient.getGitHubAuthUrl.bind(mockAPIClient)\n};\nexport const mockTypingAPI = {\n  submitTest: mockAPIClient.submitTypingTest.bind(mockAPIClient),\n  getUserTests: mockAPIClient.getUserTests.bind(mockAPIClient),\n  getLeaderboard: mockAPIClient.getLeaderboard.bind(mockAPIClient),\n  getWords: mockAPIClient.getWords.bind(mockAPIClient)\n};\nexport const mockUserAPI = {\n  updateProfile: mockAPIClient.updateProfile.bind(mockAPIClient),\n  getUserStats: mockAPIClient.getUserStats.bind(mockAPIClient)\n};","map":{"version":3,"names":["TestMode","Language","mockWords","mockUser","id","username","email","firstName","lastName","createdAt","Date","updatedAt","mockLeaderboard","user","profilePicture","undefined","wpm","accuracy","mode","SIXTY_SECONDS","completedAt","USE_MOCK_API","process","env","REACT_APP_USE_MOCK_API","REACT_APP_API_URL","MockAPIClient","constructor","isLoggedIn","token","delay","ms","Promise","resolve","setTimeout","login","credentials","password","Error","register","userData","getCurrentUser","getGoogleAuthUrl","getGitHubAuthUrl","submitTypingTest","result","now","toString","userId","getUserTests","limit","charactersTyped","errorsCount","duration","THIRTY_SECONDS","language","text","slice","getLeaderboard","filter","entry","getWords","ENGLISH","count","shuffled","sort","Math","random","words","min","length","updateProfile","getUserStats","averageWpm","averageAccuracy","testsCompleted","mockAPIClient","mockAuthAPI","bind","mockTypingAPI","submitTest","mockUserAPI"],"sources":["C:/GitHub/TurboKeys/frontend/src/services/mockApi.ts"],"sourcesContent":["import { \r\n  User, \r\n  AuthUser, \r\n  LoginRequest, \r\n  RegisterRequest, \r\n  TypingTestResult, \r\n  LeaderboardEntry, \r\n  WordListResponse,\r\n  TestMode,\r\n  Language,\r\n  ApiResponse \r\n} from '../types';\r\n\r\n// Mock data\r\nconst mockWords = [\r\n  'the', 'quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog', 'pack', 'my',\r\n  'box', 'with', 'five', 'dozen', 'liquor', 'jugs', 'waltz', 'nymph', 'for', 'back',\r\n  'gloved', 'jinx', 'quip', 'heavy', 'dwarf', 'boxing', 'gym', 'quest', 'judging', 'vow',\r\n  'sphinx', 'of', 'black', 'quartz', 'judge', 'my', 'vow', 'how', 'vexingly', 'quick',\r\n  'daft', 'zebras', 'jump', 'bright', 'vixens', 'quickly', 'fudge', 'empathy', 'wizard',\r\n  'loving', 'just', 'big', 'quorum', 'fixed', 'jinxed', 'grumpy', 'style', 'when'\r\n];\r\n\r\nconst mockUser: User = {\r\n  id: '1',\r\n  username: 'testuser',\r\n  email: 'test@example.com',\r\n  firstName: 'Test',\r\n  lastName: 'User',\r\n  createdAt: new Date(),\r\n  updatedAt: new Date(),\r\n};\r\n\r\nconst mockLeaderboard: LeaderboardEntry[] = [\r\n  {\r\n    id: '1',\r\n    user: { id: '1', username: 'SpeedTyper', profilePicture: undefined },\r\n    wpm: 120,\r\n    accuracy: 98,\r\n    mode: TestMode.SIXTY_SECONDS,\r\n    completedAt: new Date(),\r\n  },\r\n  {\r\n    id: '2',\r\n    user: { id: '2', username: 'FastFingers', profilePicture: undefined },\r\n    wpm: 115,\r\n    accuracy: 96,\r\n    mode: TestMode.SIXTY_SECONDS,\r\n    completedAt: new Date(),\r\n  },\r\n  {\r\n    id: '3',\r\n    user: { id: '3', username: 'QuickKeys', profilePicture: undefined },\r\n    wpm: 110,\r\n    accuracy: 99,\r\n    mode: TestMode.SIXTY_SECONDS,\r\n    completedAt: new Date(),\r\n  },\r\n];\r\n\r\n// Use mock API when backend is not available\r\nconst USE_MOCK_API = process.env.REACT_APP_USE_MOCK_API === 'true' || !process.env.REACT_APP_API_URL;\r\n\r\nclass MockAPIClient {\r\n  private isLoggedIn = false;\r\n  private token = 'mock-jwt-token';\r\n\r\n  // Simulate API delay\r\n  private delay(ms: number = 500) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  async login(credentials: LoginRequest): Promise<AuthUser> {\r\n    await this.delay();\r\n    \r\n    if (credentials.email === 'test@example.com' && credentials.password === 'password') {\r\n      this.isLoggedIn = true;\r\n      return {\r\n        ...mockUser,\r\n        token: this.token,\r\n      };\r\n    }\r\n    \r\n    throw new Error('Invalid email or password');\r\n  }\r\n\r\n  async register(userData: RegisterRequest): Promise<AuthUser> {\r\n    await this.delay();\r\n    \r\n    this.isLoggedIn = true;\r\n    return {\r\n      ...mockUser,\r\n      username: userData.username,\r\n      email: userData.email,\r\n      firstName: userData.firstName,\r\n      lastName: userData.lastName,\r\n      token: this.token,\r\n    };\r\n  }\r\n\r\n  async getCurrentUser(): Promise<User> {\r\n    await this.delay();\r\n    \r\n    if (!this.isLoggedIn) {\r\n      throw new Error('Not authenticated');\r\n    }\r\n    \r\n    return mockUser;\r\n  }\r\n\r\n  getGoogleAuthUrl(): string {\r\n    return '#';\r\n  }\r\n\r\n  getGitHubAuthUrl(): string {\r\n    return '#';\r\n  }\r\n\r\n  async submitTypingTest(result: Omit<TypingTestResult, 'id' | 'userId' | 'completedAt'>): Promise<TypingTestResult> {\r\n    await this.delay();\r\n    \r\n    return {\r\n      id: Date.now().toString(),\r\n      userId: mockUser.id,\r\n      completedAt: new Date(),\r\n      ...result,\r\n    };\r\n  }\r\n\r\n  async getUserTests(limit?: number): Promise<TypingTestResult[]> {\r\n    await this.delay();\r\n    \r\n    // Return mock test results\r\n    return [\r\n      {\r\n        id: '1',\r\n        userId: mockUser.id,\r\n        wpm: 85,\r\n        accuracy: 96,\r\n        charactersTyped: 150,\r\n        errorsCount: 6,\r\n        duration: 30,\r\n        mode: TestMode.THIRTY_SECONDS,\r\n        language: 'english',\r\n        text: 'Sample typing test text...',\r\n        completedAt: new Date(Date.now() - 86400000), // Yesterday\r\n      },\r\n      {\r\n        id: '2',\r\n        userId: mockUser.id,\r\n        wpm: 78,\r\n        accuracy: 94,\r\n        charactersTyped: 200,\r\n        errorsCount: 12,\r\n        duration: 60,\r\n        mode: TestMode.SIXTY_SECONDS,\r\n        language: 'english',\r\n        text: 'Another sample typing test text...',\r\n        completedAt: new Date(Date.now() - 172800000), // 2 days ago\r\n      },\r\n    ].slice(0, limit);\r\n  }\r\n\r\n  async getLeaderboard(mode: TestMode, limit: number = 10): Promise<LeaderboardEntry[]> {\r\n    await this.delay();\r\n    \r\n    return mockLeaderboard\r\n      .filter(entry => entry.mode === mode)\r\n      .slice(0, limit);\r\n  }\r\n\r\n  async getWords(language: Language = Language.ENGLISH, count: number = 50): Promise<WordListResponse> {\r\n    await this.delay();\r\n    \r\n    const shuffled = [...mockWords].sort(() => 0.5 - Math.random());\r\n    return {\r\n      words: shuffled.slice(0, Math.min(count, mockWords.length)),\r\n      language,\r\n    };\r\n  }\r\n\r\n  async updateProfile(userData: Partial<User>): Promise<User> {\r\n    await this.delay();\r\n    \r\n    return {\r\n      ...mockUser,\r\n      ...userData,\r\n      updatedAt: new Date(),\r\n    };\r\n  }\r\n\r\n  async getUserStats(): Promise<any> {\r\n    await this.delay();\r\n    \r\n    return {\r\n      averageWpm: 82,\r\n      averageAccuracy: 95,\r\n      testsCompleted: 15,\r\n    };\r\n  }\r\n}\r\n\r\nexport const mockAPIClient = new MockAPIClient();\r\n\r\n// Export mock API methods\r\nexport const mockAuthAPI = {\r\n  login: mockAPIClient.login.bind(mockAPIClient),\r\n  register: mockAPIClient.register.bind(mockAPIClient),\r\n  getCurrentUser: mockAPIClient.getCurrentUser.bind(mockAPIClient),\r\n  getGoogleAuthUrl: mockAPIClient.getGoogleAuthUrl.bind(mockAPIClient),\r\n  getGitHubAuthUrl: mockAPIClient.getGitHubAuthUrl.bind(mockAPIClient),\r\n};\r\n\r\nexport const mockTypingAPI = {\r\n  submitTest: mockAPIClient.submitTypingTest.bind(mockAPIClient),\r\n  getUserTests: mockAPIClient.getUserTests.bind(mockAPIClient),\r\n  getLeaderboard: mockAPIClient.getLeaderboard.bind(mockAPIClient),\r\n  getWords: mockAPIClient.getWords.bind(mockAPIClient),\r\n};\r\n\r\nexport const mockUserAPI = {\r\n  updateProfile: mockAPIClient.updateProfile.bind(mockAPIClient),\r\n  getUserStats: mockAPIClient.getUserStats.bind(mockAPIClient),\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}