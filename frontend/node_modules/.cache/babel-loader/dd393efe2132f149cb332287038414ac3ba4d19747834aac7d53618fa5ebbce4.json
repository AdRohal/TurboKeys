{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\TurboKeys\\\\frontend\\\\src\\\\components\\\\TypingTest\\\\TypingTest.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { typingAPI } from '../../services/api';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TypingTest = ({\n  mode,\n  language,\n  onTestComplete\n}) => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const [words, setWords] = useState([]);\n  const [currentText, setCurrentText] = useState('');\n  const [typedText, setTypedText] = useState('');\n  const [currentCharIndex, setCurrentCharIndex] = useState(0);\n  const [characters, setCharacters] = useState([]);\n  const [startTime, setStartTime] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(parseInt(mode.replace('s', '')));\n  const [isActive, setIsActive] = useState(false);\n  const [isCompleted, setIsCompleted] = useState(false);\n  const [stats, setStats] = useState({\n    wpm: 0,\n    accuracy: 0,\n    charactersTyped: 0,\n    errorsCount: 0,\n    correctCharacters: 0,\n    timeElapsed: 0\n  });\n  const inputRef = useRef(null);\n  const textDisplayRef = useRef(null);\n\n  // Load words when component mounts\n  useEffect(() => {\n    const loadWords = async () => {\n      try {\n        const response = await typingAPI.getWords(language, 200);\n        setWords(response.words);\n        generateText(response.words);\n      } catch (error) {\n        console.error('Failed to load words:', error);\n        // Fallback words\n        const fallbackWords = ['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog', 'pack', 'my', 'box', 'with', 'five', 'dozen', 'liquor', 'jugs'];\n        setWords(fallbackWords);\n        generateText(fallbackWords);\n      }\n    };\n    loadWords();\n  }, [language]);\n\n  // Generate random text from words\n  const generateText = wordList => {\n    const shuffled = [...wordList].sort(() => 0.5 - Math.random());\n    const text = shuffled.slice(0, 50).join(' ');\n    setCurrentText(text);\n    setCharacters(text.split('').map((char, index) => ({\n      char,\n      status: 'untyped',\n      index\n    })));\n  };\n\n  // Timer effect\n  useEffect(() => {\n    let interval;\n    if (isActive && timeLeft > 0 && !isCompleted) {\n      interval = setInterval(() => {\n        setTimeLeft(time => {\n          if (time <= 1) {\n            completeTest();\n            return 0;\n          }\n          return time - 1;\n        });\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [isActive, timeLeft, isCompleted]);\n\n  // Focus input when component mounts\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n  const startTest = () => {\n    if (!isActive && !isCompleted) {\n      setIsActive(true);\n      setStartTime(Date.now());\n    }\n  };\n  const calculateStats = useCallback(() => {\n    const timeElapsed = startTime ? (Date.now() - startTime) / 1000 : 0;\n    const correctCharacters = characters.filter(char => char.status === 'correct').length;\n    const incorrectCharacters = characters.filter(char => char.status === 'incorrect').length;\n    const totalTyped = correctCharacters + incorrectCharacters;\n    const wpm = timeElapsed > 0 ? Math.round(correctCharacters / 5 / (timeElapsed / 60)) : 0;\n    const accuracy = totalTyped > 0 ? Math.round(correctCharacters / totalTyped * 100) : 100;\n    return {\n      wpm,\n      accuracy,\n      charactersTyped: totalTyped,\n      errorsCount: incorrectCharacters,\n      correctCharacters,\n      timeElapsed: Math.round(timeElapsed)\n    };\n  }, [characters, startTime]);\n  const completeTest = useCallback(() => {\n    setIsActive(false);\n    setIsCompleted(true);\n    const finalStats = calculateStats();\n    setStats(finalStats);\n    onTestComplete(finalStats);\n  }, [calculateStats, onTestComplete]);\n  const handleInputChange = event => {\n    const value = event.target.value;\n    if (!isActive && !isCompleted) {\n      startTest();\n    }\n    if (isCompleted) return;\n    setTypedText(value);\n    setCurrentCharIndex(value.length);\n\n    // Update character statuses\n    const newCharacters = [...characters];\n    for (let i = 0; i < currentText.length; i++) {\n      if (i < value.length) {\n        newCharacters[i].status = value[i] === currentText[i] ? 'correct' : 'incorrect';\n      } else if (i === value.length) {\n        newCharacters[i].status = 'current';\n      } else {\n        newCharacters[i].status = 'untyped';\n      }\n    }\n    setCharacters(newCharacters);\n\n    // Complete test if all text is typed\n    if (value.length >= currentText.length) {\n      completeTest();\n    }\n  };\n  const resetTest = () => {\n    setTypedText('');\n    setCurrentCharIndex(0);\n    setStartTime(null);\n    setTimeLeft(parseInt(mode.replace('s', '')));\n    setIsActive(false);\n    setIsCompleted(false);\n    setStats({\n      wpm: 0,\n      accuracy: 0,\n      charactersTyped: 0,\n      errorsCount: 0,\n      correctCharacters: 0,\n      timeElapsed: 0\n    });\n    generateText(words);\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  // Update stats in real-time\n  useEffect(() => {\n    if (isActive && !isCompleted) {\n      const currentStats = calculateStats();\n      setStats(currentStats);\n    }\n  }, [characters, isActive, isCompleted, calculateStats]);\n  const getCharacterClassName = char => {\n    switch (char.status) {\n      case 'correct':\n        return 'char-correct';\n      case 'incorrect':\n        return 'char-incorrect';\n      case 'current':\n        return 'char-current';\n      default:\n        return 'char-untyped';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full max-w-4xl mx-auto p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between items-center mb-6 p-4 card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-2xl font-bold text-primary-600\",\n            children: stats.wpm\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-gray-600 dark:text-gray-400\",\n            children: \"WPM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-2xl font-bold text-green-600\",\n            children: [stats.accuracy, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-gray-600 dark:text-gray-400\",\n            children: \"Accuracy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-2xl font-bold text-blue-600\",\n            children: stats.errorsCount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-gray-600 dark:text-gray-400\",\n            children: \"Errors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-3xl font-bold text-orange-600\",\n          children: timeLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm text-gray-600 dark:text-gray-400\",\n          children: \"Seconds\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: textDisplayRef,\n      className: \"mb-6 p-6 card typing-text min-h-[200px] leading-loose cursor-text\",\n      onClick: () => {\n        var _inputRef$current;\n        return (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n      },\n      children: characters.map((char, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: `${getCharacterClassName(char)} ${char.char === ' ' ? 'mr-1' : ''}`,\n        children: char.char === ' ' ? '\\u00A0' : char.char\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: inputRef,\n        type: \"text\",\n        value: typedText,\n        onChange: handleInputChange,\n        disabled: isCompleted,\n        className: \"input-field font-mono text-lg\",\n        placeholder: isCompleted ? \"Test completed!\" : \"Start typing to begin...\",\n        autoComplete: \"off\",\n        autoCorrect: \"off\",\n        autoCapitalize: \"off\",\n        spellCheck: \"false\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center space-x-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetTest,\n        className: \"btn-secondary\",\n        children: \"Reset Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), isCompleted && user && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          // Save test result to backend\n          typingAPI.submitTest({\n            wpm: stats.wpm,\n            accuracy: stats.accuracy,\n            charactersTyped: stats.charactersTyped,\n            errorsCount: stats.errorsCount,\n            duration: parseInt(mode.replace('s', '')),\n            mode,\n            language,\n            text: currentText\n          });\n        },\n        className: \"btn-primary\",\n        children: \"Save Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), isCompleted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 p-4 card text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl font-bold mb-2\",\n        children: \"Test Completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600 dark:text-gray-400\",\n        children: [\"You typed at \", stats.wpm, \" WPM with \", stats.accuracy, \"% accuracy\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n};\n_s(TypingTest, \"VAZsehlM3YUIa0YaEZtmB1CnsnQ=\", false, function () {\n  return [useAuth];\n});\n_c = TypingTest;\nexport default TypingTest;\nvar _c;\n$RefreshReg$(_c, \"TypingTest\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","typingAPI","useAuth","jsxDEV","_jsxDEV","TypingTest","mode","language","onTestComplete","_s","user","words","setWords","currentText","setCurrentText","typedText","setTypedText","currentCharIndex","setCurrentCharIndex","characters","setCharacters","startTime","setStartTime","timeLeft","setTimeLeft","parseInt","replace","isActive","setIsActive","isCompleted","setIsCompleted","stats","setStats","wpm","accuracy","charactersTyped","errorsCount","correctCharacters","timeElapsed","inputRef","textDisplayRef","loadWords","response","getWords","generateText","error","console","fallbackWords","wordList","shuffled","sort","Math","random","text","slice","join","split","map","char","index","status","interval","setInterval","time","completeTest","clearInterval","current","focus","startTest","Date","now","calculateStats","filter","length","incorrectCharacters","totalTyped","round","finalStats","handleInputChange","event","value","target","newCharacters","i","resetTest","currentStats","getCharacterClassName","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","_inputRef$current","type","onChange","disabled","placeholder","autoComplete","autoCorrect","autoCapitalize","spellCheck","submitTest","duration","_c","$RefreshReg$"],"sources":["C:/GitHub/TurboKeys/frontend/src/components/TypingTest/TypingTest.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { TestMode, Language, TypingStats, TypingCharacter } from '../../types';\r\nimport { typingAPI } from '../../services/api';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\n\r\ninterface TypingTestProps {\r\n  mode: TestMode;\r\n  language: Language;\r\n  onTestComplete: (stats: TypingStats) => void;\r\n}\r\n\r\nconst TypingTest: React.FC<TypingTestProps> = ({ mode, language, onTestComplete }) => {\r\n  const { user } = useAuth();\r\n  const [words, setWords] = useState<string[]>([]);\r\n  const [currentText, setCurrentText] = useState<string>('');\r\n  const [typedText, setTypedText] = useState<string>('');\r\n  const [currentCharIndex, setCurrentCharIndex] = useState<number>(0);\r\n  const [characters, setCharacters] = useState<TypingCharacter[]>([]);\r\n  const [startTime, setStartTime] = useState<number | null>(null);\r\n  const [timeLeft, setTimeLeft] = useState<number>(parseInt(mode.replace('s', '')));\r\n  const [isActive, setIsActive] = useState<boolean>(false);\r\n  const [isCompleted, setIsCompleted] = useState<boolean>(false);\r\n  const [stats, setStats] = useState<TypingStats>({\r\n    wpm: 0,\r\n    accuracy: 0,\r\n    charactersTyped: 0,\r\n    errorsCount: 0,\r\n    correctCharacters: 0,\r\n    timeElapsed: 0,\r\n  });\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const textDisplayRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Load words when component mounts\r\n  useEffect(() => {\r\n    const loadWords = async () => {\r\n      try {\r\n        const response = await typingAPI.getWords(language, 200);\r\n        setWords(response.words);\r\n        generateText(response.words);\r\n      } catch (error) {\r\n        console.error('Failed to load words:', error);\r\n        // Fallback words\r\n        const fallbackWords = [\r\n          'the', 'quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog',\r\n          'pack', 'my', 'box', 'with', 'five', 'dozen', 'liquor', 'jugs'\r\n        ];\r\n        setWords(fallbackWords);\r\n        generateText(fallbackWords);\r\n      }\r\n    };\r\n\r\n    loadWords();\r\n  }, [language]);\r\n\r\n  // Generate random text from words\r\n  const generateText = (wordList: string[]) => {\r\n    const shuffled = [...wordList].sort(() => 0.5 - Math.random());\r\n    const text = shuffled.slice(0, 50).join(' ');\r\n    setCurrentText(text);\r\n    setCharacters(text.split('').map((char, index) => ({\r\n      char,\r\n      status: 'untyped',\r\n      index,\r\n    })));\r\n  };\r\n\r\n  // Timer effect\r\n  useEffect(() => {\r\n    let interval: NodeJS.Timeout;\r\n\r\n    if (isActive && timeLeft > 0 && !isCompleted) {\r\n      interval = setInterval(() => {\r\n        setTimeLeft((time) => {\r\n          if (time <= 1) {\r\n            completeTest();\r\n            return 0;\r\n          }\r\n          return time - 1;\r\n        });\r\n      }, 1000);\r\n    }\r\n\r\n    return () => clearInterval(interval);\r\n  }, [isActive, timeLeft, isCompleted]);\r\n\r\n  // Focus input when component mounts\r\n  useEffect(() => {\r\n    if (inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, []);\r\n\r\n  const startTest = () => {\r\n    if (!isActive && !isCompleted) {\r\n      setIsActive(true);\r\n      setStartTime(Date.now());\r\n    }\r\n  };\r\n\r\n  const calculateStats = useCallback((): TypingStats => {\r\n    const timeElapsed = startTime ? (Date.now() - startTime) / 1000 : 0;\r\n    const correctCharacters = characters.filter(char => char.status === 'correct').length;\r\n    const incorrectCharacters = characters.filter(char => char.status === 'incorrect').length;\r\n    const totalTyped = correctCharacters + incorrectCharacters;\r\n    \r\n    const wpm = timeElapsed > 0 ? Math.round((correctCharacters / 5) / (timeElapsed / 60)) : 0;\r\n    const accuracy = totalTyped > 0 ? Math.round((correctCharacters / totalTyped) * 100) : 100;\r\n\r\n    return {\r\n      wpm,\r\n      accuracy,\r\n      charactersTyped: totalTyped,\r\n      errorsCount: incorrectCharacters,\r\n      correctCharacters,\r\n      timeElapsed: Math.round(timeElapsed),\r\n    };\r\n  }, [characters, startTime]);\r\n\r\n  const completeTest = useCallback(() => {\r\n    setIsActive(false);\r\n    setIsCompleted(true);\r\n    const finalStats = calculateStats();\r\n    setStats(finalStats);\r\n    onTestComplete(finalStats);\r\n  }, [calculateStats, onTestComplete]);\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = event.target.value;\r\n    \r\n    if (!isActive && !isCompleted) {\r\n      startTest();\r\n    }\r\n\r\n    if (isCompleted) return;\r\n\r\n    setTypedText(value);\r\n    setCurrentCharIndex(value.length);\r\n\r\n    // Update character statuses\r\n    const newCharacters = [...characters];\r\n    \r\n    for (let i = 0; i < currentText.length; i++) {\r\n      if (i < value.length) {\r\n        newCharacters[i].status = value[i] === currentText[i] ? 'correct' : 'incorrect';\r\n      } else if (i === value.length) {\r\n        newCharacters[i].status = 'current';\r\n      } else {\r\n        newCharacters[i].status = 'untyped';\r\n      }\r\n    }\r\n\r\n    setCharacters(newCharacters);\r\n\r\n    // Complete test if all text is typed\r\n    if (value.length >= currentText.length) {\r\n      completeTest();\r\n    }\r\n  };\r\n\r\n  const resetTest = () => {\r\n    setTypedText('');\r\n    setCurrentCharIndex(0);\r\n    setStartTime(null);\r\n    setTimeLeft(parseInt(mode.replace('s', '')));\r\n    setIsActive(false);\r\n    setIsCompleted(false);\r\n    setStats({\r\n      wpm: 0,\r\n      accuracy: 0,\r\n      charactersTyped: 0,\r\n      errorsCount: 0,\r\n      correctCharacters: 0,\r\n      timeElapsed: 0,\r\n    });\r\n    generateText(words);\r\n    \r\n    if (inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  };\r\n\r\n  // Update stats in real-time\r\n  useEffect(() => {\r\n    if (isActive && !isCompleted) {\r\n      const currentStats = calculateStats();\r\n      setStats(currentStats);\r\n    }\r\n  }, [characters, isActive, isCompleted, calculateStats]);\r\n\r\n  const getCharacterClassName = (char: TypingCharacter) => {\r\n    switch (char.status) {\r\n      case 'correct':\r\n        return 'char-correct';\r\n      case 'incorrect':\r\n        return 'char-incorrect';\r\n      case 'current':\r\n        return 'char-current';\r\n      default:\r\n        return 'char-untyped';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-4xl mx-auto p-6\">\r\n      {/* Stats Display */}\r\n      <div className=\"flex justify-between items-center mb-6 p-4 card\">\r\n        <div className=\"flex space-x-6\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold text-primary-600\">{stats.wpm}</div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">WPM</div>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold text-green-600\">{stats.accuracy}%</div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Accuracy</div>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold text-blue-600\">{stats.errorsCount}</div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Errors</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"text-center\">\r\n          <div className=\"text-3xl font-bold text-orange-600\">{timeLeft}</div>\r\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">Seconds</div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Text Display */}\r\n      <div \r\n        ref={textDisplayRef}\r\n        className=\"mb-6 p-6 card typing-text min-h-[200px] leading-loose cursor-text\"\r\n        onClick={() => inputRef.current?.focus()}\r\n      >\r\n        {characters.map((char, index) => (\r\n          <span\r\n            key={index}\r\n            className={`${getCharacterClassName(char)} ${char.char === ' ' ? 'mr-1' : ''}`}\r\n          >\r\n            {char.char === ' ' ? '\\u00A0' : char.char}\r\n          </span>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Input Field */}\r\n      <div className=\"mb-6\">\r\n        <input\r\n          ref={inputRef}\r\n          type=\"text\"\r\n          value={typedText}\r\n          onChange={handleInputChange}\r\n          disabled={isCompleted}\r\n          className=\"input-field font-mono text-lg\"\r\n          placeholder={isCompleted ? \"Test completed!\" : \"Start typing to begin...\"}\r\n          autoComplete=\"off\"\r\n          autoCorrect=\"off\"\r\n          autoCapitalize=\"off\"\r\n          spellCheck=\"false\"\r\n        />\r\n      </div>\r\n\r\n      {/* Controls */}\r\n      <div className=\"flex justify-center space-x-4\">\r\n        <button\r\n          onClick={resetTest}\r\n          className=\"btn-secondary\"\r\n        >\r\n          Reset Test\r\n        </button>\r\n        {isCompleted && user && (\r\n          <button\r\n            onClick={() => {\r\n              // Save test result to backend\r\n              typingAPI.submitTest({\r\n                wpm: stats.wpm,\r\n                accuracy: stats.accuracy,\r\n                charactersTyped: stats.charactersTyped,\r\n                errorsCount: stats.errorsCount,\r\n                duration: parseInt(mode.replace('s', '')),\r\n                mode,\r\n                language,\r\n                text: currentText,\r\n              });\r\n            }}\r\n            className=\"btn-primary\"\r\n          >\r\n            Save Result\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {/* Completion Message */}\r\n      {isCompleted && (\r\n        <div className=\"mt-6 p-4 card text-center\">\r\n          <h3 className=\"text-xl font-bold mb-2\">Test Completed!</h3>\r\n          <p className=\"text-gray-600 dark:text-gray-400\">\r\n            You typed at {stats.wpm} WPM with {stats.accuracy}% accuracy\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypingTest;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}