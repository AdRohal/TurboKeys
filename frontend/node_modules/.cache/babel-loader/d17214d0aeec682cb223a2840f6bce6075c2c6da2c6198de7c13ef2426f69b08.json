{"ast":null,"code":"import axios from 'axios';\nimport { TestMode, Language } from '../types';\nimport { mockAuthAPI, mockTypingAPI, mockUserAPI } from './mockApi';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8081/api';\nconst USE_MOCK_API = process.env.REACT_APP_USE_MOCK_API === 'true';\nclass APIClient {\n  constructor() {\n    this.client = void 0;\n    this.client = axios.create({\n      baseURL: API_BASE_URL,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Add auth token to requests\n    this.client.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n\n    // Handle auth errors\n    this.client.interceptors.response.use(response => response, error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        localStorage.removeItem('token');\n        window.location.href = '/login';\n      }\n      return Promise.reject(error);\n    });\n  }\n  async handleResponse(response) {\n    // Handle wrapped response (with success/data structure)\n    if (response.data && typeof response.data === 'object' && 'success' in response.data && 'data' in response.data) {\n      const apiResponse = response.data;\n      if (apiResponse.success && apiResponse.data) {\n        return apiResponse.data;\n      }\n      throw new Error(apiResponse.error || apiResponse.message || 'API request failed');\n    }\n\n    // Handle direct response (data returned directly)\n    return response.data;\n  }\n\n  // Check if backend is available\n  async isBackendAvailable() {\n    if (USE_MOCK_API) return false;\n    try {\n      await this.client.get('/health', {\n        timeout: 2000\n      });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  // Auth endpoints\n  async login(credentials) {\n    if (!(await this.isBackendAvailable())) {\n      return mockAuthAPI.login(credentials);\n    }\n    const response = await this.client.post('/auth/login', credentials);\n    return this.handleResponse(response);\n  }\n  async register(userData) {\n    if (!(await this.isBackendAvailable())) {\n      return mockAuthAPI.register(userData);\n    }\n    const response = await this.client.post('/auth/register', userData);\n    return this.handleResponse(response);\n  }\n  async getCurrentUser() {\n    if (!(await this.isBackendAvailable())) {\n      return mockAuthAPI.getCurrentUser();\n    }\n    const response = await this.client.get('/auth/me');\n    return this.handleResponse(response);\n  }\n\n  // OAuth endpoints\n  getGoogleAuthUrl() {\n    if (USE_MOCK_API) return mockAuthAPI.getGoogleAuthUrl();\n    return `${API_BASE_URL}/auth/oauth2/google`;\n  }\n  getGitHubAuthUrl() {\n    if (USE_MOCK_API) return mockAuthAPI.getGitHubAuthUrl();\n    return `${API_BASE_URL}/auth/oauth2/github`;\n  }\n\n  // Typing test endpoints\n  async submitTypingTest(result) {\n    if (!(await this.isBackendAvailable())) {\n      return mockTypingAPI.submitTest(result);\n    }\n    const response = await this.client.post('/typing-tests/submit', result);\n    return this.handleResponse(response);\n  }\n  async getUserTests(limit) {\n    if (!(await this.isBackendAvailable())) {\n      return mockTypingAPI.getUserTests(limit);\n    }\n    const response = await this.client.get(`/typing-tests/user${limit ? `?limit=${limit}` : ''}`);\n    return this.handleResponse(response);\n  }\n  async getTypingHistory(page = 1, limit = 20, duration, mode, language) {\n    if (!(await this.isBackendAvailable())) {\n      return {\n        tests: await mockTypingAPI.getUserTests(limit),\n        totalPages: 1,\n        currentPage: 1,\n        total: 0\n      };\n    }\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString()\n    });\n    if (duration) params.append('duration', duration.toString());\n    if (mode) params.append('mode', mode);\n    if (language) params.append('language', language);\n    const response = await this.client.get(`/typing-tests/history?${params}`);\n    return this.handleResponse(response);\n  }\n  async getBestScores() {\n    if (!(await this.isBackendAvailable())) {\n      return [];\n    }\n    const response = await this.client.get('/typing-tests/best-scores');\n    return this.handleResponse(response);\n  }\n  async getLeaderboard(duration = 30, mode = 'time', language = 'english', limit = 50) {\n    if (!(await this.isBackendAvailable())) {\n      return mockTypingAPI.getLeaderboard(TestMode.THIRTY_SECONDS, limit);\n    }\n    const params = new URLSearchParams({\n      duration: duration.toString(),\n      mode,\n      language,\n      limit: limit.toString()\n    });\n    const response = await this.client.get(`/typing-tests/leaderboard?${params}`);\n    return this.handleResponse(response);\n  }\n  async getTypingStats() {\n    if (!(await this.isBackendAvailable())) {\n      return {};\n    }\n    const response = await this.client.get('/typing-tests/stats');\n    return this.handleResponse(response);\n  }\n\n  // Words endpoints\n  async getWords(language = Language.ENGLISH, count = 50) {\n    if (!(await this.isBackendAvailable())) {\n      return mockTypingAPI.getWords(language, count);\n    }\n    const response = await this.client.get(`/words?language=${language}&count=${count}`);\n    return this.handleResponse(response);\n  }\n\n  // User profile endpoints\n  async updateProfile(userData) {\n    if (!(await this.isBackendAvailable())) {\n      return mockUserAPI.updateProfile(userData);\n    }\n    const response = await this.client.put('/users/profile', userData);\n    return this.handleResponse(response);\n  }\n  async getUserStats() {\n    if (!(await this.isBackendAvailable())) {\n      return mockUserAPI.getUserStats();\n    }\n    const response = await this.client.get('/users/stats');\n    return this.handleResponse(response);\n  }\n\n  // Generic HTTP methods\n  async get(url) {\n    return this.client.get(url);\n  }\n  async post(url, data) {\n    return this.client.post(url, data);\n  }\n  async put(url, data) {\n    return this.client.put(url, data);\n  }\n  async delete(url) {\n    return this.client.delete(url);\n  }\n}\nexport const apiClient = new APIClient();\n\n// Convenience exports\nexport const authAPI = {\n  login: apiClient.login.bind(apiClient),\n  register: apiClient.register.bind(apiClient),\n  getCurrentUser: apiClient.getCurrentUser.bind(apiClient),\n  getGoogleAuthUrl: apiClient.getGoogleAuthUrl.bind(apiClient),\n  getGitHubAuthUrl: apiClient.getGitHubAuthUrl.bind(apiClient)\n};\nexport const typingAPI = {\n  submitTest: apiClient.submitTypingTest.bind(apiClient),\n  getUserTests: apiClient.getUserTests.bind(apiClient),\n  getHistory: apiClient.getTypingHistory.bind(apiClient),\n  getBestScores: apiClient.getBestScores.bind(apiClient),\n  getLeaderboard: apiClient.getLeaderboard.bind(apiClient),\n  getStats: apiClient.getTypingStats.bind(apiClient),\n  getWords: apiClient.getWords.bind(apiClient)\n};\nexport const userAPI = {\n  updateProfile: apiClient.updateProfile.bind(apiClient),\n  getUserStats: apiClient.getUserStats.bind(apiClient)\n};\nexport default apiClient;","map":{"version":3,"names":["axios","TestMode","Language","mockAuthAPI","mockTypingAPI","mockUserAPI","API_BASE_URL","process","env","REACT_APP_API_URL","USE_MOCK_API","REACT_APP_USE_MOCK_API","APIClient","constructor","client","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","handleResponse","data","apiResponse","success","Error","message","isBackendAvailable","get","timeout","login","credentials","post","register","userData","getCurrentUser","getGoogleAuthUrl","getGitHubAuthUrl","submitTypingTest","result","submitTest","getUserTests","limit","getTypingHistory","page","duration","mode","language","tests","totalPages","currentPage","total","params","URLSearchParams","toString","append","getBestScores","getLeaderboard","THIRTY_SECONDS","getTypingStats","getWords","ENGLISH","count","updateProfile","put","getUserStats","url","delete","apiClient","authAPI","bind","typingAPI","getHistory","getStats","userAPI"],"sources":["C:/GitHub/TurboKeys/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\r\nimport { \r\n  User, \r\n  AuthUser, \r\n  LoginRequest, \r\n  RegisterRequest, \r\n  TypingTestResult, \r\n  LeaderboardEntry, \r\n  WordListResponse,\r\n  TestMode,\r\n  Language,\r\n  ApiResponse \r\n} from '../types';\r\nimport { mockAuthAPI, mockTypingAPI, mockUserAPI } from './mockApi';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8081/api';\r\nconst USE_MOCK_API = process.env.REACT_APP_USE_MOCK_API === 'true';\r\n\r\nclass APIClient {\r\n  private client: AxiosInstance;\r\n\r\n  constructor() {\r\n    this.client = axios.create({\r\n      baseURL: API_BASE_URL,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Add auth token to requests\r\n    this.client.interceptors.request.use((config) => {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n      }\r\n      return config;\r\n    });\r\n\r\n    // Handle auth errors\r\n    this.client.interceptors.response.use(\r\n      (response) => response,\r\n      (error) => {\r\n        if (error.response?.status === 401) {\r\n          localStorage.removeItem('token');\r\n          window.location.href = '/login';\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  private async handleResponse<T>(response: AxiosResponse<ApiResponse<T> | T>): Promise<T> {\r\n    // Handle wrapped response (with success/data structure)\r\n    if (response.data && typeof response.data === 'object' && 'success' in response.data && 'data' in response.data) {\r\n      const apiResponse = response.data as ApiResponse<T>;\r\n      if (apiResponse.success && apiResponse.data) {\r\n        return apiResponse.data;\r\n      }\r\n      throw new Error(apiResponse.error || apiResponse.message || 'API request failed');\r\n    }\r\n    \r\n    // Handle direct response (data returned directly)\r\n    return response.data as T;\r\n  }\r\n\r\n  // Check if backend is available\r\n  private async isBackendAvailable(): Promise<boolean> {\r\n    if (USE_MOCK_API) return false;\r\n    \r\n    try {\r\n      await this.client.get('/health', { timeout: 2000 });\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Auth endpoints\r\n  async login(credentials: LoginRequest): Promise<AuthUser> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockAuthAPI.login(credentials);\r\n    }\r\n    \r\n    const response = await this.client.post<ApiResponse<AuthUser>>('/auth/login', credentials);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async register(userData: RegisterRequest): Promise<AuthUser> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockAuthAPI.register(userData);\r\n    }\r\n    \r\n    const response = await this.client.post<ApiResponse<AuthUser>>('/auth/register', userData);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getCurrentUser(): Promise<User> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockAuthAPI.getCurrentUser();\r\n    }\r\n    \r\n    const response = await this.client.get<ApiResponse<User>>('/auth/me');\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  // OAuth endpoints\r\n  getGoogleAuthUrl(): string {\r\n    if (USE_MOCK_API) return mockAuthAPI.getGoogleAuthUrl();\r\n    return `${API_BASE_URL}/auth/oauth2/google`;\r\n  }\r\n\r\n  getGitHubAuthUrl(): string {\r\n    if (USE_MOCK_API) return mockAuthAPI.getGitHubAuthUrl();\r\n    return `${API_BASE_URL}/auth/oauth2/github`;\r\n  }\r\n\r\n  // Typing test endpoints\r\n  async submitTypingTest(result: Omit<TypingTestResult, 'id' | 'userId' | 'completedAt'>): Promise<TypingTestResult> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockTypingAPI.submitTest(result);\r\n    }\r\n    \r\n    const response = await this.client.post<ApiResponse<TypingTestResult>>('/typing-tests/submit', result);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getUserTests(limit?: number): Promise<TypingTestResult[]> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockTypingAPI.getUserTests(limit);\r\n    }\r\n    \r\n    const response = await this.client.get<ApiResponse<TypingTestResult[]>>(`/typing-tests/user${limit ? `?limit=${limit}` : ''}`);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getTypingHistory(page: number = 1, limit: number = 20, duration?: number, mode?: string, language?: string): Promise<{ tests: TypingTestResult[], totalPages: number, currentPage: number, total: number }> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return { tests: await mockTypingAPI.getUserTests(limit), totalPages: 1, currentPage: 1, total: 0 };\r\n    }\r\n    \r\n    const params = new URLSearchParams({ page: page.toString(), limit: limit.toString() });\r\n    if (duration) params.append('duration', duration.toString());\r\n    if (mode) params.append('mode', mode);\r\n    if (language) params.append('language', language);\r\n    \r\n    const response = await this.client.get<ApiResponse<{ tests: TypingTestResult[], totalPages: number, currentPage: number, total: number }>>(`/typing-tests/history?${params}`);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getBestScores(): Promise<any[]> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return [];\r\n    }\r\n    \r\n    const response = await this.client.get<ApiResponse<any[]>>('/typing-tests/best-scores');\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getLeaderboard(duration: number = 30, mode: string = 'time', language: string = 'english', limit: number = 50): Promise<LeaderboardEntry[]> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockTypingAPI.getLeaderboard(TestMode.THIRTY_SECONDS, limit);\r\n    }\r\n    \r\n    const params = new URLSearchParams({ \r\n      duration: duration.toString(), \r\n      mode, \r\n      language, \r\n      limit: limit.toString() \r\n    });\r\n    \r\n    const response = await this.client.get<ApiResponse<LeaderboardEntry[]>>(`/typing-tests/leaderboard?${params}`);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getTypingStats(): Promise<any> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return {};\r\n    }\r\n    \r\n    const response = await this.client.get<ApiResponse<any>>('/typing-tests/stats');\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  // Words endpoints\r\n  async getWords(language: Language = Language.ENGLISH, count: number = 50): Promise<WordListResponse> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockTypingAPI.getWords(language, count);\r\n    }\r\n    \r\n    const response = await this.client.get<ApiResponse<WordListResponse>>(`/words?language=${language}&count=${count}`);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  // User profile endpoints\r\n  async updateProfile(userData: Partial<User>): Promise<User> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockUserAPI.updateProfile(userData);\r\n    }\r\n    \r\n    const response = await this.client.put<ApiResponse<User>>('/users/profile', userData);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getUserStats(): Promise<any> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockUserAPI.getUserStats();\r\n    }\r\n    \r\n    const response = await this.client.get<ApiResponse<any>>('/users/stats');\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  // Generic HTTP methods\r\n  async get<T = any>(url: string): Promise<AxiosResponse<T>> {\r\n    return this.client.get(url);\r\n  }\r\n\r\n  async post<T = any>(url: string, data?: any): Promise<AxiosResponse<T>> {\r\n    return this.client.post(url, data);\r\n  }\r\n\r\n  async put<T = any>(url: string, data?: any): Promise<AxiosResponse<T>> {\r\n    return this.client.put(url, data);\r\n  }\r\n\r\n  async delete<T = any>(url: string): Promise<AxiosResponse<T>> {\r\n    return this.client.delete(url);\r\n  }\r\n}\r\n\r\nexport const apiClient = new APIClient();\r\n\r\n// Convenience exports\r\nexport const authAPI = {\r\n  login: apiClient.login.bind(apiClient),\r\n  register: apiClient.register.bind(apiClient),\r\n  getCurrentUser: apiClient.getCurrentUser.bind(apiClient),\r\n  getGoogleAuthUrl: apiClient.getGoogleAuthUrl.bind(apiClient),\r\n  getGitHubAuthUrl: apiClient.getGitHubAuthUrl.bind(apiClient),\r\n};\r\n\r\nexport const typingAPI = {\r\n  submitTest: apiClient.submitTypingTest.bind(apiClient),\r\n  getUserTests: apiClient.getUserTests.bind(apiClient),\r\n  getHistory: apiClient.getTypingHistory.bind(apiClient),\r\n  getBestScores: apiClient.getBestScores.bind(apiClient),\r\n  getLeaderboard: apiClient.getLeaderboard.bind(apiClient),\r\n  getStats: apiClient.getTypingStats.bind(apiClient),\r\n  getWords: apiClient.getWords.bind(apiClient),\r\n};\r\n\r\nexport const userAPI = {\r\n  updateProfile: apiClient.updateProfile.bind(apiClient),\r\n  getUserStats: apiClient.getUserStats.bind(apiClient),\r\n};\r\n\r\nexport default apiClient;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}