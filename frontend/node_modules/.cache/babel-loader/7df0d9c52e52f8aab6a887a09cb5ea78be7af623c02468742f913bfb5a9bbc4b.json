{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\TurboKeys\\\\frontend\\\\src\\\\components\\\\TypingTest\\\\TypingTest.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { TestMode, Language } from '../../types';\nimport { typingAPI } from '../../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TypingTest = ({\n  mode,\n  language,\n  onTestComplete\n}) => {\n  _s();\n  const [words, setWords] = useState([]);\n  const [displayText, setDisplayText] = useState('');\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [userInput, setUserInput] = useState('');\n  const [isTestActive, setIsTestActive] = useState(false);\n  const [isTestComplete, setIsTestComplete] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const [wpm, setWpm] = useState(0);\n  const [accuracy, setAccuracy] = useState(100);\n  const [correctChars, setCorrectChars] = useState(0);\n  const [totalChars, setTotalChars] = useState(0);\n  const [isComposing, setIsComposing] = useState(false);\n  const [showCompositionHint, setShowCompositionHint] = useState(false);\n  const textAreaRef = useRef(null);\n  const timerRef = useRef(null);\n\n  // Korean character detection functions\n  const isKoreanCharacter = char => {\n    const code = char.charCodeAt(0);\n    return code >= 0xAC00 && code <= 0xD7AF ||\n    // Hangul syllables\n    code >= 0x3130 && code <= 0x318F; // Hangul compatibility Jamo\n  };\n  const isKoreanJamo = char => {\n    const code = char.charCodeAt(0);\n    return code >= 0x1100 && code <= 0x11FF ||\n    // Hangul Jamo\n    code >= 0x3130 && code <= 0x318F ||\n    // Hangul compatibility Jamo\n    code >= 0xA960 && code <= 0xA97F; // Hangul Jamo Extended-A\n  };\n  const isCompleteHangulSyllable = char => {\n    const code = char.charCodeAt(0);\n    return code >= 0xAC00 && code <= 0xD7AF; // Complete Hangul syllables only\n  };\n\n  // Get test duration based on mode\n  const getTestDuration = mode => {\n    switch (mode) {\n      case TestMode.FIFTEEN_SECONDS:\n        return 15;\n      case TestMode.THIRTY_SECONDS:\n        return 30;\n      case TestMode.SIXTY_SECONDS:\n        return 60;\n      case TestMode.ONE_TWENTY_SECONDS:\n        return 120;\n      default:\n        return 30;\n    }\n  };\n\n  // Load words based on language\n  useEffect(() => {\n    const loadWords = async () => {\n      try {\n        const wordCount = language === Language.KOREAN ? 30 : 50;\n        const response = await typingAPI.getWords(language, wordCount);\n        setWords(response.words);\n        setDisplayText(response.words.join(' '));\n        setTimeLeft(getTestDuration(mode));\n      } catch (error) {\n        console.error('Failed to load words:', error);\n        // Fallback words\n        const fallbackWords = language === Language.KOREAN ? ['안녕', '세상', '컴퓨터', '키보드', '타이핑', '연습', '한글', '입력', '테스트', '속도'] : ['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog'];\n        setWords(fallbackWords);\n        setDisplayText(fallbackWords.join(' '));\n        setTimeLeft(getTestDuration(mode));\n      }\n    };\n    loadWords();\n  }, [mode, language]);\n\n  // Reset test state\n  const resetTest = useCallback(() => {\n    setCurrentIndex(0);\n    setUserInput('');\n    setIsTestActive(false);\n    setIsTestComplete(false);\n    setStartTime(null);\n    setWpm(0);\n    setAccuracy(100);\n    setCorrectChars(0);\n    setTotalChars(0);\n    setIsComposing(false);\n    setShowCompositionHint(false);\n    setTimeLeft(getTestDuration(mode));\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n  }, [mode]);\n\n  // Start test\n  const startTest = useCallback(() => {\n    if (!isTestActive && !isTestComplete) {\n      setIsTestActive(true);\n      setStartTime(new Date());\n\n      // Start timer\n      timerRef.current = setInterval(() => {\n        setTimeLeft(prev => {\n          if (prev <= 1) {\n            setIsTestActive(false);\n            setIsTestComplete(true);\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    }\n  }, [isTestActive, isTestComplete]);\n\n  // Calculate real-time stats\n  useEffect(() => {\n    if (isTestActive && startTime) {\n      const timeElapsed = (Date.now() - startTime.getTime()) / 1000;\n      if (timeElapsed > 0) {\n        const wordsTyped = userInput.length / 5; // Standard: 5 characters = 1 word\n        const currentWpm = Math.round(wordsTyped / timeElapsed * 60);\n        setWpm(currentWpm);\n        if (totalChars > 0) {\n          const currentAccuracy = Math.round(correctChars / totalChars * 100);\n          setAccuracy(currentAccuracy);\n        }\n      }\n    }\n  }, [userInput, correctChars, totalChars, isTestActive, startTime]);\n\n  // Complete test\n  useEffect(() => {\n    if (isTestComplete && startTime) {\n      const timeElapsed = (Date.now() - startTime.getTime()) / 1000;\n      const finalStats = {\n        wpm: wpm,\n        accuracy: accuracy,\n        charactersTyped: userInput.length,\n        errorsCount: totalChars - correctChars,\n        correctCharacters: correctChars,\n        timeElapsed: timeElapsed\n      };\n      onTestComplete(finalStats);\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n    }\n  }, [isTestComplete, wpm, accuracy, userInput.length, correctChars, totalChars, startTime, onTestComplete]);\n\n  // Generate character array for display\n  const getCharacterArray = () => {\n    const characters = [];\n    for (let i = 0; i < displayText.length; i++) {\n      let status = 'untyped';\n      if (i < userInput.length) {\n        status = userInput[i] === displayText[i] ? 'correct' : 'incorrect';\n      } else if (i === currentIndex) {\n        status = 'current';\n      }\n      characters.push({\n        char: displayText[i],\n        status,\n        index: i\n      });\n    }\n    return characters;\n  };\n\n  // Handle composition events for Korean IME\n  const handleCompositionStart = useCallback(() => {\n    setIsComposing(true);\n    if (language === Language.KOREAN) {\n      setShowCompositionHint(true);\n    }\n  }, [language]);\n  const handleCompositionUpdate = useCallback(e => {\n    // During composition, show hint for Korean\n    if (language === Language.KOREAN && e.data) {\n      const hasJamo = Array.from(e.data).some(char => isKoreanJamo(char));\n      setShowCompositionHint(hasJamo);\n    }\n  }, [language]);\n  const handleCompositionEnd = useCallback(() => {\n    setIsComposing(false);\n    setShowCompositionHint(false);\n  }, []);\n\n  // Handle text input\n  const handleInput = useCallback(e => {\n    if (isTestComplete) return;\n    const value = e.currentTarget.value;\n\n    // For Korean language, filter out incomplete Jamo during composition\n    if (language === Language.KOREAN && isComposing) {\n      // During composition, don't process the input yet\n      return;\n    }\n\n    // Start test on first input\n    if (!isTestActive && value.length > 0) {\n      startTest();\n    }\n\n    // Process the input\n    let processedValue = value;\n\n    // For Korean, ensure we only process complete syllables\n    if (language === Language.KOREAN) {\n      const filteredChars = Array.from(value).filter(char => {\n        if (isKoreanCharacter(char)) {\n          return isCompleteHangulSyllable(char);\n        }\n        return true; // Allow non-Korean characters\n      });\n      processedValue = filteredChars.join('');\n    }\n    setUserInput(processedValue);\n    setCurrentIndex(processedValue.length);\n\n    // Calculate stats\n    let correct = 0;\n    for (let i = 0; i < processedValue.length && i < displayText.length; i++) {\n      if (processedValue[i] === displayText[i]) {\n        correct++;\n      }\n    }\n    setCorrectChars(correct);\n    setTotalChars(processedValue.length);\n\n    // Auto-complete if user typed all text correctly\n    if (processedValue === displayText) {\n      setIsTestActive(false);\n      setIsTestComplete(true);\n    }\n  }, [isTestComplete, isTestActive, startTest, language, isComposing, displayText]);\n\n  // Handle key down events\n  const handleKeyDown = useCallback(e => {\n    if (isTestComplete) return;\n\n    // For Korean IME, ignore certain keys during composition\n    if (language === Language.KOREAN && isComposing) {\n      // Allow backspace and delete during composition\n      if (e.key !== 'Backspace' && e.key !== 'Delete') {\n        return;\n      }\n    }\n\n    // Prevent some default behaviors\n    if (e.key === 'Tab' || e.key === 'Enter') {\n      e.preventDefault();\n    }\n  }, [isTestComplete, language, isComposing]);\n\n  // Handle beforeinput event to block unwanted characters\n  const handleBeforeInput = useCallback(e => {\n    if (isTestComplete) return;\n    const inputEvent = e.nativeEvent;\n\n    // For Korean language, block individual Jamo characters\n    if (language === Language.KOREAN && inputEvent.data) {\n      const containsIncompleteJamo = Array.from(inputEvent.data).some(char => isKoreanJamo(char) && !isCompleteHangulSyllable(char));\n      if (containsIncompleteJamo && !isComposing) {\n        e.preventDefault();\n        return;\n      }\n    }\n  }, [isTestComplete, language, isComposing]);\n\n  // Focus text area on mount\n  useEffect(() => {\n    if (textAreaRef.current) {\n      textAreaRef.current.focus();\n    }\n  }, []);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, []);\n  const characters = getCharacterArray();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-4xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center space-x-8 mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-2xl font-bold text-primary-600\",\n          children: Math.max(0, timeLeft)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm text-gray-600 dark:text-gray-400\",\n          children: \"Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-2xl font-bold text-primary-600\",\n          children: wpm\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm text-gray-600 dark:text-gray-400\",\n          children: \"WPM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-2xl font-bold text-primary-600\",\n          children: [accuracy, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm text-gray-600 dark:text-gray-400\",\n          children: \"Accuracy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this), language === Language.KOREAN && showCompositionHint && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 p-3 bg-blue-50 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-800 rounded-lg text-center\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-blue-700 dark:text-blue-300\",\n        children: \"\\uC644\\uC131\\uB41C \\uD55C\\uAE00 \\uAE00\\uC790\\uB9CC \\uC785\\uB825\\uB429\\uB2C8\\uB2E4. \\uC790\\uC74C\\uC774\\uB098 \\uBAA8\\uC74C\\uB9CC\\uC73C\\uB85C\\uB294 \\uCC98\\uB9AC\\uB418\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card p-6 mb-6 relative\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-lg leading-relaxed font-mono\",\n        style: {\n          lineHeight: '1.8'\n        },\n        children: characters.map((char, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `${char.status === 'correct' ? 'text-green-600 bg-green-100 dark:bg-green-900/30' : char.status === 'incorrect' ? 'text-red-600 bg-red-100 dark:bg-red-900/30' : char.status === 'current' ? 'bg-blue-200 dark:bg-blue-800 border-l-2 border-blue-500' : 'text-gray-500 dark:text-gray-400'} ${char.char === ' ' ? 'mr-1' : ''}`,\n          style: {\n            padding: char.char === ' ' ? '0 0.25rem' : '0'\n          },\n          children: char.char === ' ' ? '·' : char.char\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: textAreaRef,\n        value: userInput,\n        onChange: handleInput,\n        onKeyDown: handleKeyDown,\n        onBeforeInput: handleBeforeInput,\n        onCompositionStart: handleCompositionStart,\n        onCompositionUpdate: handleCompositionUpdate,\n        onCompositionEnd: handleCompositionEnd,\n        className: \"absolute inset-0 w-full h-full opacity-0 resize-none border-none outline-none\",\n        disabled: isTestComplete,\n        spellCheck: false,\n        autoComplete: \"off\",\n        autoCorrect: \"off\",\n        autoCapitalize: \"off\",\n        style: {\n          background: 'transparent',\n          caretColor: 'transparent'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this), !isTestActive && !isTestComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-0 flex items-center justify-center bg-gray-50 dark:bg-gray-800 bg-opacity-90 rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-lg text-gray-600 dark:text-gray-400 mb-2\",\n            children: \"Click here to focus and start typing\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 15\n          }, this), language === Language.KOREAN && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500 dark:text-gray-500\",\n            children: \"\\uD55C\\uAE00 \\uC785\\uB825 \\uC2DC \\uC644\\uC131\\uB41C \\uAE00\\uC790\\uB9CC \\uCC98\\uB9AC\\uB429\\uB2C8\\uB2E4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this), isTestComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card p-6 text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl font-bold text-gray-900 dark:text-gray-100 mb-4\",\n        children: \"Test Complete!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-2xl font-bold text-primary-600\",\n            children: wpm\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-gray-600 dark:text-gray-400\",\n            children: \"WPM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-2xl font-bold text-green-600\",\n            children: [accuracy, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-gray-600 dark:text-gray-400\",\n            children: \"Accuracy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-2xl font-bold text-blue-600\",\n            children: userInput.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-gray-600 dark:text-gray-400\",\n            children: \"Characters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-2xl font-bold text-red-600\",\n            children: totalChars - correctChars\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-gray-600 dark:text-gray-400\",\n            children: \"Errors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetTest,\n        className: \"btn-primary\",\n        children: \"Try Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 321,\n    columnNumber: 5\n  }, this);\n};\n_s(TypingTest, \"gO/QhFc7X9wC9+LkVhgbR6gqr14=\");\n_c = TypingTest;\nexport default TypingTest;\nvar _c;\n$RefreshReg$(_c, \"TypingTest\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","TestMode","Language","typingAPI","jsxDEV","_jsxDEV","TypingTest","mode","language","onTestComplete","_s","words","setWords","displayText","setDisplayText","currentIndex","setCurrentIndex","userInput","setUserInput","isTestActive","setIsTestActive","isTestComplete","setIsTestComplete","timeLeft","setTimeLeft","startTime","setStartTime","wpm","setWpm","accuracy","setAccuracy","correctChars","setCorrectChars","totalChars","setTotalChars","isComposing","setIsComposing","showCompositionHint","setShowCompositionHint","textAreaRef","timerRef","isKoreanCharacter","char","code","charCodeAt","isKoreanJamo","isCompleteHangulSyllable","getTestDuration","FIFTEEN_SECONDS","THIRTY_SECONDS","SIXTY_SECONDS","ONE_TWENTY_SECONDS","loadWords","wordCount","KOREAN","response","getWords","join","error","console","fallbackWords","resetTest","current","clearInterval","startTest","Date","setInterval","prev","timeElapsed","now","getTime","wordsTyped","length","currentWpm","Math","round","currentAccuracy","finalStats","charactersTyped","errorsCount","correctCharacters","getCharacterArray","characters","i","status","push","index","handleCompositionStart","handleCompositionUpdate","e","data","hasJamo","Array","from","some","handleCompositionEnd","handleInput","value","currentTarget","processedValue","filteredChars","filter","correct","handleKeyDown","key","preventDefault","handleBeforeInput","inputEvent","nativeEvent","containsIncompleteJamo","focus","className","children","max","fileName","_jsxFileName","lineNumber","columnNumber","style","lineHeight","map","padding","ref","onChange","onKeyDown","onBeforeInput","onCompositionStart","onCompositionUpdate","onCompositionEnd","disabled","spellCheck","autoComplete","autoCorrect","autoCapitalize","background","caretColor","onClick","_c","$RefreshReg$"],"sources":["C:/GitHub/TurboKeys/frontend/src/components/TypingTest/TypingTest.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { TestMode, Language, TypingStats } from '../../types';\r\nimport { typingAPI } from '../../services/api';\r\n\r\ninterface TypingTestProps {\r\n  mode: TestMode;\r\n  language: Language;\r\n  onTestComplete: (stats: TypingStats) => void;\r\n}\r\n\r\ninterface TypingCharacter {\r\n  char: string;\r\n  status: 'correct' | 'incorrect' | 'current' | 'untyped';\r\n  index: number;\r\n}\r\n\r\nconst TypingTest: React.FC<TypingTestProps> = ({ mode, language, onTestComplete }) => {\r\n  const [words, setWords] = useState<string[]>([]);\r\n  const [displayText, setDisplayText] = useState<string>('');\r\n  const [currentIndex, setCurrentIndex] = useState<number>(0);\r\n  const [userInput, setUserInput] = useState<string>('');\r\n  const [isTestActive, setIsTestActive] = useState<boolean>(false);\r\n  const [isTestComplete, setIsTestComplete] = useState<boolean>(false);\r\n  const [timeLeft, setTimeLeft] = useState<number>(0);\r\n  const [startTime, setStartTime] = useState<Date | null>(null);\r\n  const [wpm, setWpm] = useState<number>(0);\r\n  const [accuracy, setAccuracy] = useState<number>(100);\r\n  const [correctChars, setCorrectChars] = useState<number>(0);\r\n  const [totalChars, setTotalChars] = useState<number>(0);\r\n  const [isComposing, setIsComposing] = useState<boolean>(false);\r\n  const [showCompositionHint, setShowCompositionHint] = useState<boolean>(false);\r\n  \r\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\r\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  // Korean character detection functions\r\n  const isKoreanCharacter = (char: string): boolean => {\r\n    const code = char.charCodeAt(0);\r\n    return (code >= 0xAC00 && code <= 0xD7AF) || // Hangul syllables\r\n           (code >= 0x3130 && code <= 0x318F);   // Hangul compatibility Jamo\r\n  };\r\n\r\n  const isKoreanJamo = (char: string): boolean => {\r\n    const code = char.charCodeAt(0);\r\n    return (code >= 0x1100 && code <= 0x11FF) || // Hangul Jamo\r\n           (code >= 0x3130 && code <= 0x318F) || // Hangul compatibility Jamo\r\n           (code >= 0xA960 && code <= 0xA97F);   // Hangul Jamo Extended-A\r\n  };\r\n\r\n  const isCompleteHangulSyllable = (char: string): boolean => {\r\n    const code = char.charCodeAt(0);\r\n    return code >= 0xAC00 && code <= 0xD7AF; // Complete Hangul syllables only\r\n  };\r\n\r\n  // Get test duration based on mode\r\n  const getTestDuration = (mode: TestMode): number => {\r\n    switch (mode) {\r\n      case TestMode.FIFTEEN_SECONDS: return 15;\r\n      case TestMode.THIRTY_SECONDS: return 30;\r\n      case TestMode.SIXTY_SECONDS: return 60;\r\n      case TestMode.ONE_TWENTY_SECONDS: return 120;\r\n      default: return 30;\r\n    }\r\n  };\r\n\r\n  // Load words based on language\r\n  useEffect(() => {\r\n    const loadWords = async () => {\r\n      try {\r\n        const wordCount = language === Language.KOREAN ? 30 : 50;\r\n        const response = await typingAPI.getWords(language, wordCount);\r\n        setWords(response.words);\r\n        setDisplayText(response.words.join(' '));\r\n        setTimeLeft(getTestDuration(mode));\r\n      } catch (error) {\r\n        console.error('Failed to load words:', error);\r\n        // Fallback words\r\n        const fallbackWords = language === Language.KOREAN \r\n          ? ['안녕', '세상', '컴퓨터', '키보드', '타이핑', '연습', '한글', '입력', '테스트', '속도']\r\n          : ['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog'];\r\n        setWords(fallbackWords);\r\n        setDisplayText(fallbackWords.join(' '));\r\n        setTimeLeft(getTestDuration(mode));\r\n      }\r\n    };\r\n\r\n    loadWords();\r\n  }, [mode, language]);\r\n\r\n  // Reset test state\r\n  const resetTest = useCallback(() => {\r\n    setCurrentIndex(0);\r\n    setUserInput('');\r\n    setIsTestActive(false);\r\n    setIsTestComplete(false);\r\n    setStartTime(null);\r\n    setWpm(0);\r\n    setAccuracy(100);\r\n    setCorrectChars(0);\r\n    setTotalChars(0);\r\n    setIsComposing(false);\r\n    setShowCompositionHint(false);\r\n    setTimeLeft(getTestDuration(mode));\r\n    \r\n    if (timerRef.current) {\r\n      clearInterval(timerRef.current);\r\n      timerRef.current = null;\r\n    }\r\n  }, [mode]);\r\n\r\n  // Start test\r\n  const startTest = useCallback(() => {\r\n    if (!isTestActive && !isTestComplete) {\r\n      setIsTestActive(true);\r\n      setStartTime(new Date());\r\n      \r\n      // Start timer\r\n      timerRef.current = setInterval(() => {\r\n        setTimeLeft(prev => {\r\n          if (prev <= 1) {\r\n            setIsTestActive(false);\r\n            setIsTestComplete(true);\r\n            return 0;\r\n          }\r\n          return prev - 1;\r\n        });\r\n      }, 1000);\r\n    }\r\n  }, [isTestActive, isTestComplete]);\r\n\r\n  // Calculate real-time stats\r\n  useEffect(() => {\r\n    if (isTestActive && startTime) {\r\n      const timeElapsed = (Date.now() - startTime.getTime()) / 1000;\r\n      if (timeElapsed > 0) {\r\n        const wordsTyped = userInput.length / 5; // Standard: 5 characters = 1 word\r\n        const currentWpm = Math.round((wordsTyped / timeElapsed) * 60);\r\n        setWpm(currentWpm);\r\n\r\n        if (totalChars > 0) {\r\n          const currentAccuracy = Math.round((correctChars / totalChars) * 100);\r\n          setAccuracy(currentAccuracy);\r\n        }\r\n      }\r\n    }\r\n  }, [userInput, correctChars, totalChars, isTestActive, startTime]);\r\n\r\n  // Complete test\r\n  useEffect(() => {\r\n    if (isTestComplete && startTime) {\r\n      const timeElapsed = (Date.now() - startTime.getTime()) / 1000;\r\n      const finalStats: TypingStats = {\r\n        wpm: wpm,\r\n        accuracy: accuracy,\r\n        charactersTyped: userInput.length,\r\n        errorsCount: totalChars - correctChars,\r\n        correctCharacters: correctChars,\r\n        timeElapsed: timeElapsed\r\n      };\r\n      \r\n      onTestComplete(finalStats);\r\n      \r\n      if (timerRef.current) {\r\n        clearInterval(timerRef.current);\r\n        timerRef.current = null;\r\n      }\r\n    }\r\n  }, [isTestComplete, wpm, accuracy, userInput.length, correctChars, totalChars, startTime, onTestComplete]);\r\n\r\n  // Generate character array for display\r\n  const getCharacterArray = (): TypingCharacter[] => {\r\n    const characters: TypingCharacter[] = [];\r\n    \r\n    for (let i = 0; i < displayText.length; i++) {\r\n      let status: 'correct' | 'incorrect' | 'current' | 'untyped' = 'untyped';\r\n      \r\n      if (i < userInput.length) {\r\n        status = userInput[i] === displayText[i] ? 'correct' : 'incorrect';\r\n      } else if (i === currentIndex) {\r\n        status = 'current';\r\n      }\r\n      \r\n      characters.push({\r\n        char: displayText[i],\r\n        status,\r\n        index: i\r\n      });\r\n    }\r\n    \r\n    return characters;\r\n  };\r\n\r\n  // Handle composition events for Korean IME\r\n  const handleCompositionStart = useCallback(() => {\r\n    setIsComposing(true);\r\n    if (language === Language.KOREAN) {\r\n      setShowCompositionHint(true);\r\n    }\r\n  }, [language]);\r\n\r\n  const handleCompositionUpdate = useCallback((e: React.CompositionEvent) => {\r\n    // During composition, show hint for Korean\r\n    if (language === Language.KOREAN && e.data) {\r\n      const hasJamo = Array.from(e.data).some(char => isKoreanJamo(char));\r\n      setShowCompositionHint(hasJamo);\r\n    }\r\n  }, [language]);\r\n\r\n  const handleCompositionEnd = useCallback(() => {\r\n    setIsComposing(false);\r\n    setShowCompositionHint(false);\r\n  }, []);\r\n\r\n  // Handle text input\r\n  const handleInput = useCallback((e: React.FormEvent<HTMLTextAreaElement>) => {\r\n    if (isTestComplete) return;\r\n\r\n    const value = e.currentTarget.value;\r\n    \r\n    // For Korean language, filter out incomplete Jamo during composition\r\n    if (language === Language.KOREAN && isComposing) {\r\n      // During composition, don't process the input yet\r\n      return;\r\n    }\r\n\r\n    // Start test on first input\r\n    if (!isTestActive && value.length > 0) {\r\n      startTest();\r\n    }\r\n\r\n    // Process the input\r\n    let processedValue = value;\r\n    \r\n    // For Korean, ensure we only process complete syllables\r\n    if (language === Language.KOREAN) {\r\n      const filteredChars = Array.from(value).filter(char => {\r\n        if (isKoreanCharacter(char)) {\r\n          return isCompleteHangulSyllable(char);\r\n        }\r\n        return true; // Allow non-Korean characters\r\n      });\r\n      processedValue = filteredChars.join('');\r\n    }\r\n\r\n    setUserInput(processedValue);\r\n    setCurrentIndex(processedValue.length);\r\n\r\n    // Calculate stats\r\n    let correct = 0;\r\n    for (let i = 0; i < processedValue.length && i < displayText.length; i++) {\r\n      if (processedValue[i] === displayText[i]) {\r\n        correct++;\r\n      }\r\n    }\r\n    setCorrectChars(correct);\r\n    setTotalChars(processedValue.length);\r\n\r\n    // Auto-complete if user typed all text correctly\r\n    if (processedValue === displayText) {\r\n      setIsTestActive(false);\r\n      setIsTestComplete(true);\r\n    }\r\n  }, [isTestComplete, isTestActive, startTest, language, isComposing, displayText]);\r\n\r\n  // Handle key down events\r\n  const handleKeyDown = useCallback((e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n    if (isTestComplete) return;\r\n\r\n    // For Korean IME, ignore certain keys during composition\r\n    if (language === Language.KOREAN && isComposing) {\r\n      // Allow backspace and delete during composition\r\n      if (e.key !== 'Backspace' && e.key !== 'Delete') {\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Prevent some default behaviors\r\n    if (e.key === 'Tab' || e.key === 'Enter') {\r\n      e.preventDefault();\r\n    }\r\n  }, [isTestComplete, language, isComposing]);\r\n\r\n  // Handle beforeinput event to block unwanted characters\r\n  const handleBeforeInput = useCallback((e: React.FormEvent<HTMLTextAreaElement>) => {\r\n    if (isTestComplete) return;\r\n\r\n    const inputEvent = e.nativeEvent as InputEvent;\r\n    \r\n    // For Korean language, block individual Jamo characters\r\n    if (language === Language.KOREAN && inputEvent.data) {\r\n      const containsIncompleteJamo = Array.from(inputEvent.data).some(char => \r\n        isKoreanJamo(char) && !isCompleteHangulSyllable(char)\r\n      );\r\n      \r\n      if (containsIncompleteJamo && !isComposing) {\r\n        e.preventDefault();\r\n        return;\r\n      }\r\n    }\r\n  }, [isTestComplete, language, isComposing]);\r\n\r\n  // Focus text area on mount\r\n  useEffect(() => {\r\n    if (textAreaRef.current) {\r\n      textAreaRef.current.focus();\r\n    }\r\n  }, []);\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (timerRef.current) {\r\n        clearInterval(timerRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const characters = getCharacterArray();\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto\">\r\n      {/* Stats Display */}\r\n      <div className=\"flex justify-center space-x-8 mb-6\">\r\n        <div className=\"text-center\">\r\n          <div className=\"text-2xl font-bold text-primary-600\">{Math.max(0, timeLeft)}</div>\r\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">Time</div>\r\n        </div>\r\n        <div className=\"text-center\">\r\n          <div className=\"text-2xl font-bold text-primary-600\">{wpm}</div>\r\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">WPM</div>\r\n        </div>\r\n        <div className=\"text-center\">\r\n          <div className=\"text-2xl font-bold text-primary-600\">{accuracy}%</div>\r\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">Accuracy</div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Korean Composition Hint */}\r\n      {language === Language.KOREAN && showCompositionHint && (\r\n        <div className=\"mb-4 p-3 bg-blue-50 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-800 rounded-lg text-center\">\r\n          <p className=\"text-sm text-blue-700 dark:text-blue-300\">\r\n            완성된 한글 글자만 입력됩니다. 자음이나 모음만으로는 처리되지 않습니다.\r\n          </p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Text Display */}\r\n      <div className=\"card p-6 mb-6 relative\">\r\n        <div className=\"text-lg leading-relaxed font-mono\" style={{ lineHeight: '1.8' }}>\r\n          {characters.map((char, index) => (\r\n            <span\r\n              key={index}\r\n              className={`${\r\n                char.status === 'correct'\r\n                  ? 'text-green-600 bg-green-100 dark:bg-green-900/30'\r\n                  : char.status === 'incorrect'\r\n                  ? 'text-red-600 bg-red-100 dark:bg-red-900/30'\r\n                  : char.status === 'current'\r\n                  ? 'bg-blue-200 dark:bg-blue-800 border-l-2 border-blue-500'\r\n                  : 'text-gray-500 dark:text-gray-400'\r\n              } ${char.char === ' ' ? 'mr-1' : ''}`}\r\n              style={{\r\n                padding: char.char === ' ' ? '0 0.25rem' : '0',\r\n              }}\r\n            >\r\n              {char.char === ' ' ? '·' : char.char}\r\n            </span>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Invisible textarea for input capture */}\r\n        <textarea\r\n          ref={textAreaRef}\r\n          value={userInput}\r\n          onChange={handleInput}\r\n          onKeyDown={handleKeyDown}\r\n          onBeforeInput={handleBeforeInput}\r\n          onCompositionStart={handleCompositionStart}\r\n          onCompositionUpdate={handleCompositionUpdate}\r\n          onCompositionEnd={handleCompositionEnd}\r\n          className=\"absolute inset-0 w-full h-full opacity-0 resize-none border-none outline-none\"\r\n          disabled={isTestComplete}\r\n          spellCheck={false}\r\n          autoComplete=\"off\"\r\n          autoCorrect=\"off\"\r\n          autoCapitalize=\"off\"\r\n          style={{ \r\n            background: 'transparent',\r\n            caretColor: 'transparent'\r\n          }}\r\n        />\r\n\r\n        {/* Focus hint */}\r\n        {!isTestActive && !isTestComplete && (\r\n          <div className=\"absolute inset-0 flex items-center justify-center bg-gray-50 dark:bg-gray-800 bg-opacity-90 rounded\">\r\n            <div className=\"text-center\">\r\n              <p className=\"text-lg text-gray-600 dark:text-gray-400 mb-2\">\r\n                Click here to focus and start typing\r\n              </p>\r\n              {language === Language.KOREAN && (\r\n                <p className=\"text-sm text-gray-500 dark:text-gray-500\">\r\n                  한글 입력 시 완성된 글자만 처리됩니다\r\n                </p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Test Complete */}\r\n      {isTestComplete && (\r\n        <div className=\"card p-6 text-center\">\r\n          <h3 className=\"text-xl font-bold text-gray-900 dark:text-gray-100 mb-4\">\r\n            Test Complete!\r\n          </h3>\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\">\r\n            <div>\r\n              <div className=\"text-2xl font-bold text-primary-600\">{wpm}</div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">WPM</div>\r\n            </div>\r\n            <div>\r\n              <div className=\"text-2xl font-bold text-green-600\">{accuracy}%</div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">Accuracy</div>\r\n            </div>\r\n            <div>\r\n              <div className=\"text-2xl font-bold text-blue-600\">{userInput.length}</div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">Characters</div>\r\n            </div>\r\n            <div>\r\n              <div className=\"text-2xl font-bold text-red-600\">{totalChars - correctChars}</div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">Errors</div>\r\n            </div>\r\n          </div>\r\n          <button\r\n            onClick={resetTest}\r\n            className=\"btn-primary\"\r\n          >\r\n            Try Again\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypingTest;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}