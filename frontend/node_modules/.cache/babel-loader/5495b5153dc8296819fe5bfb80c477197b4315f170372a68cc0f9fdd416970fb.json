{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\TurboKeys\\\\frontend\\\\src\\\\pages\\\\Home.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { TestMode, Language } from '../types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [selectedMode, setSelectedMode] = useState(TestMode.THIRTY_SECONDS);\n  const [selectedLanguage, setSelectedLanguage] = useState(Language.ENGLISH);\n  const [isTestActive, setIsTestActive] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(30);\n  const [userInput, setUserInput] = useState('');\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [wpm, setWpm] = useState(0);\n  const [accuracy, setAccuracy] = useState(100);\n  const [isTestComplete, setIsTestComplete] = useState(false);\n  const [correctChars, setCorrectChars] = useState(0);\n  const [totalChars, setTotalChars] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const textAreaRef = useRef(null);\n  const timerRef = useRef(null);\n\n  // Sample texts for different languages - Long, realistic paragraphs\n  const sampleTexts = {\n    english: \"The art of communication has evolved dramatically throughout human history, transforming from simple gestures and sounds into sophisticated systems of written and spoken language. In today's digital age, the ability to type quickly and accurately has become an essential skill for personal and professional success. Whether you're writing emails, creating documents, programming software, or engaging in online conversations, your typing speed and accuracy directly impact your productivity and effectiveness. The development of muscle memory through consistent practice allows your fingers to move automatically across the keyboard, reducing the cognitive load required for typing and freeing your mind to focus on the content and ideas you want to express. Modern typing techniques emphasize proper posture, correct finger placement, and smooth, rhythmic keystrokes that minimize fatigue and maximize efficiency. Professional typists often achieve speeds of over one hundred words per minute while maintaining near-perfect accuracy, demonstrating the remarkable potential of human motor skills when properly trained and refined. The journey to becoming a skilled typist requires patience, dedication, and regular practice, but the rewards are substantial and long-lasting. Many successful writers, journalists, programmers, and business professionals credit their typing skills as a fundamental contributor to their career achievements. In an increasingly competitive job market, the ability to communicate quickly and effectively through written text has become a valuable asset that can set you apart from other candidates. Furthermore, the rise of remote work and digital collaboration has made typing skills even more crucial for professional success. Video conferences, instant messaging, collaborative documents, and project management tools all require efficient text input to maximize their effectiveness. The time invested in developing strong typing skills pays dividends throughout your entire career, making it one of the most practical and valuable abilities you can cultivate. Regular practice not only improves your speed and accuracy but also reduces the physical strain associated with prolonged keyboard use, helping to prevent repetitive stress injuries and maintain long-term hand and wrist health.\",\n    french: \"L'évolution de la technologie moderne a transformé notre façon de communiquer, de travailler et d'interagir avec le monde qui nous entoure. Dans cette ère numérique, la maîtrise du clavier est devenue une compétence fondamentale qui influence directement notre productivité et notre efficacité professionnelle. La France, avec sa riche tradition littéraire et culturelle, a toujours valorisé l'expression écrite comme un art noble et raffiné. Aujourd'hui, cette tradition se prolonge dans le domaine numérique, où la capacité à taper rapidement et précisément en français constitue un atout considérable pour les étudiants, les professionnels et les créateurs de contenu. Les particularités de la langue française, avec ses accents, ses cédilles et ses caractères spéciaux, exigent une attention particulière lors de l'apprentissage de la dactylographie. La disposition AZERTY, spécifique aux pays francophones, diffère significativement du clavier QWERTY anglo-saxon, nécessitant une adaptation particulière pour ceux qui passent d'un système à l'autre. Les techniques modernes d'apprentissage de la frappe intègrent des méthodes pédagogiques innovantes qui respectent les spécificités linguistiques du français tout en développant la mémoire musculaire nécessaire à une saisie fluide et naturelle. La pratique régulière de la dactylographie française permet non seulement d'améliorer la vitesse de frappe, mais aussi de renforcer la maîtrise orthographique et grammaticale de la langue. Cette double compétence s'avère particulièrement précieuse dans le contexte professionnel contemporain, où la communication écrite occupe une place centrale dans la plupart des métiers. Les secteurs du journalisme, de l'édition, de la traduction, du secrétariat et de la communication digitale requièrent tous une excellente maîtrise de la frappe française. L'apprentissage progressif et méthodique de cette compétence contribue également au développement de la concentration et de la discipline personnelle, qualités essentielles dans notre société de l'information où les distractions numériques sont omniprésentes. La capacité à produire rapidement du texte de qualité en français ouvre de nombreuses opportunités professionnelles et créatives, permettant aux individus de s'exprimer avec aisance et précision dans tous les contextes digitaux.\"\n  };\n  const displayText = sampleTexts[selectedLanguage];\n\n  // Get test duration\n  const getTestDuration = mode => {\n    switch (mode) {\n      case TestMode.FIFTEEN_SECONDS:\n        return 15;\n      case TestMode.THIRTY_SECONDS:\n        return 30;\n      case TestMode.SIXTY_SECONDS:\n        return 60;\n      case TestMode.ONE_TWENTY_SECONDS:\n        return 120;\n      default:\n        return 30;\n    }\n  };\n\n  // Start test\n  const startTest = () => {\n    if (!isTestActive && !isTestComplete) {\n      setIsTestActive(true);\n      setStartTime(new Date());\n      setTimeLeft(getTestDuration(selectedMode));\n\n      // Start timer\n      timerRef.current = setInterval(() => {\n        setTimeLeft(prev => {\n          if (prev <= 1) {\n            setIsTestActive(false);\n            setIsTestComplete(true);\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    }\n  };\n\n  // Reset test\n  const resetTest = () => {\n    setIsTestActive(false);\n    setIsTestComplete(false);\n    setUserInput('');\n    setCurrentIndex(0);\n    setWpm(0);\n    setAccuracy(100);\n    setCorrectChars(0);\n    setTotalChars(0);\n    setStartTime(null);\n    setTimeLeft(getTestDuration(selectedMode));\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n  };\n\n  // Handle input\n  const handleInput = e => {\n    if (isTestComplete) return;\n    const value = e.currentTarget.value;\n\n    // Start test on first input\n    if (!isTestActive && value.length > 0) {\n      startTest();\n    }\n\n    // If user reached the end of text, complete the test\n    if (value.length >= displayText.length) {\n      setIsTestActive(false);\n      setIsTestComplete(true);\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n      return;\n    }\n    setUserInput(value);\n    setCurrentIndex(value.length);\n\n    // Calculate accuracy\n    let correct = 0;\n    for (let i = 0; i < value.length && i < displayText.length; i++) {\n      if (value[i] === displayText[i]) {\n        correct++;\n      }\n    }\n    setCorrectChars(correct);\n    setTotalChars(value.length);\n    if (value.length > 0) {\n      setAccuracy(Math.round(correct / value.length * 100));\n    }\n  };\n\n  // Calculate WPM\n  useEffect(() => {\n    if (isTestActive && startTime) {\n      const timeElapsed = (Date.now() - startTime.getTime()) / 1000;\n      if (timeElapsed > 0) {\n        const wordsTyped = userInput.length / 5; // Standard: 5 characters = 1 word\n        const currentWpm = Math.round(wordsTyped / timeElapsed * 60);\n        setWpm(currentWpm);\n      }\n    }\n  }, [userInput, isTestActive, startTime]);\n\n  // Reset when mode or language changes\n  useEffect(() => {\n    const resetTestFunction = () => {\n      setIsTestActive(false);\n      setIsTestComplete(false);\n      setUserInput('');\n      setCurrentIndex(0);\n      setWpm(0);\n      setAccuracy(100);\n      setCorrectChars(0);\n      setTotalChars(0);\n      setStartTime(null);\n      setTimeLeft(getTestDuration(selectedMode));\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n    };\n    resetTestFunction();\n  }, [selectedMode, selectedLanguage]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, []);\n\n  // Split text into words and lines for display\n  const getWordsAndLines = () => {\n    const words = displayText.split(' ');\n    const lines = [];\n    let currentLine = [];\n    let currentLineLength = 0;\n    const maxLineLength = 60; // Approximate characters per line\n\n    words.forEach(word => {\n      if (currentLineLength + word.length + 1 > maxLineLength && currentLine.length > 0) {\n        lines.push(currentLine.join(' '));\n        currentLine = [word];\n        currentLineLength = word.length;\n      } else {\n        currentLine.push(word);\n        currentLineLength += word.length + (currentLine.length > 1 ? 1 : 0);\n      }\n    });\n    if (currentLine.length > 0) {\n      lines.push(currentLine.join(' '));\n    }\n    return lines;\n  };\n\n  // Get current line based on user input\n  const getCurrentLineInfo = () => {\n    const lines = getWordsAndLines();\n    let charCount = 0;\n    let currentLineIndex = 0;\n    for (let i = 0; i < lines.length; i++) {\n      const lineEndIndex = charCount + lines[i].length + (i < lines.length - 1 ? 1 : 0); // +1 for space\n      if (currentIndex <= lineEndIndex) {\n        currentLineIndex = i;\n        break;\n      }\n      charCount += lines[i].length + 1; // +1 for space between lines\n    }\n    return {\n      lines,\n      currentLineIndex,\n      startCharIndex: currentLineIndex === 0 ? 0 : lines.slice(0, currentLineIndex).join(' ').length + currentLineIndex\n    };\n  };\n\n  // Generate character display for visible lines only\n  const getCharacterDisplay = () => {\n    const {\n      lines,\n      currentLineIndex\n    } = getCurrentLineInfo();\n    const visibleLines = lines.slice(Math.max(0, currentLineIndex - 1), currentLineIndex + 3);\n    const startLineIndex = Math.max(0, currentLineIndex - 1);\n    let globalCharIndex = 0;\n    // Calculate starting character index for visible lines\n    for (let i = 0; i < startLineIndex; i++) {\n      globalCharIndex += lines[i].length + (i < lines.length - 1 ? 1 : 0);\n    }\n    return visibleLines.map((line, lineIndex) => {\n      const actualLineIndex = startLineIndex + lineIndex;\n      const chars = [];\n      for (let i = 0; i < line.length; i++) {\n        const globalIndex = globalCharIndex + i;\n        let className = 'text-gray-400';\n        if (globalIndex < userInput.length) {\n          if (userInput[globalIndex] === displayText[globalIndex]) {\n            className = 'text-green-400';\n          } else {\n            className = 'text-red-400 bg-red-900/30';\n          }\n        } else if (globalIndex === currentIndex && isTestActive) {\n          className = 'bg-yellow-400 text-gray-900';\n        }\n        chars.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          className: className,\n          children: line[i]\n        }, globalIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this));\n      }\n      globalCharIndex += line.length + (actualLineIndex < lines.length - 1 ? 1 : 0);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"leading-relaxed\",\n        children: chars\n      }, actualLineIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-900 text-gray-300\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto px-4 py-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center mb-12\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-3xl font-bold text-yellow-400 mb-2\",\n          children: \"TurboKeys\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center mb-12\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col items-center gap-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-wrap gap-2 justify-center\",\n            children: Object.values(TestMode).map(mode => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                setSelectedMode(mode);\n                resetTest();\n              },\n              className: `px-4 py-2 rounded text-sm font-medium transition-colors ${selectedMode === mode ? 'bg-yellow-400 text-gray-900' : 'bg-gray-800 text-gray-400 hover:bg-gray-700 hover:text-gray-300'}`,\n              children: mode\n            }, mode, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-wrap gap-2 justify-center\",\n            children: Object.values(Language).map(language => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                setSelectedLanguage(language);\n                resetTest();\n              },\n              className: `px-4 py-2 rounded text-sm font-medium transition-colors ${selectedLanguage === language ? 'bg-yellow-400 text-gray-900' : 'bg-gray-800 text-gray-400 hover:bg-gray-700 hover:text-gray-300'}`,\n              children: language === 'french' ? 'Français' : 'English'\n            }, language, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-[90%] mx-auto px-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center space-x-8 mb-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-3xl font-bold text-yellow-400\",\n              children: timeLeft\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-gray-400\",\n              children: \"Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-3xl font-bold text-yellow-400\",\n              children: wpm\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-gray-400\",\n              children: \"WPM\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-3xl font-bold text-yellow-400\",\n              children: [accuracy, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-gray-400\",\n              children: \"Accuracy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-gray-800 rounded-lg p-8 mb-6 min-h-[300px] relative cursor-text\",\n          onClick: () => {\n            var _textAreaRef$current;\n            return (_textAreaRef$current = textAreaRef.current) === null || _textAreaRef$current === void 0 ? void 0 : _textAreaRef$current.focus();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-3xl leading-relaxed font-mono max-w-5xl mx-auto space-y-4\",\n            children: getCharacterDisplay()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            ref: textAreaRef,\n            value: userInput,\n            onChange: handleInput,\n            className: \"absolute inset-0 w-full h-full opacity-0 resize-none outline-none\",\n            disabled: isTestComplete,\n            placeholder: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 13\n          }, this), !isTestActive && !isTestComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute inset-0 bg-gray-800 bg-opacity-90 rounded-lg flex items-center justify-center\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center text-gray-400\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-xl mb-2\",\n                children: \"Click here to start typing\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-sm\",\n                children: [\"Selected: \", selectedMode, \" \\u2022 \", selectedLanguage === 'french' ? 'Français' : 'English']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this), isTestComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center bg-gray-800 rounded-lg p-8 mb-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-2xl font-bold text-yellow-400 mb-4\",\n            children: \"Test Complete!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-3 gap-8 mb-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-3xl font-bold text-yellow-400\",\n                children: wpm\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-sm text-gray-400\",\n                children: \"WPM\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-3xl font-bold text-green-400\",\n                children: [accuracy, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-sm text-gray-400\",\n                children: \"Accuracy\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-3xl font-bold text-blue-400\",\n                children: [correctChars, \"/\", totalChars]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-sm text-gray-400\",\n                children: \"Correct\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 375,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: resetTest,\n            className: \"bg-yellow-400 text-gray-900 px-6 py-2 rounded font-medium hover:bg-yellow-300 transition-colors\",\n            children: \"Try Again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 13\n        }, this), !isTestActive && !isTestComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center text-gray-400 mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm\",\n            children: \"Click on the text above to start typing\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-4xl mx-auto mt-16 text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm text-gray-500 space-y-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Click on the text area to start \\u2022 Type the words exactly as shown \\u2022 Use backspace to correct mistakes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Your WPM and accuracy will be calculated in real-time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 260,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"sLfvP2nlVvwvhUHGLkozFr6Ireg=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","useRef","TestMode","Language","jsxDEV","_jsxDEV","Home","_s","selectedMode","setSelectedMode","THIRTY_SECONDS","selectedLanguage","setSelectedLanguage","ENGLISH","isTestActive","setIsTestActive","timeLeft","setTimeLeft","userInput","setUserInput","currentIndex","setCurrentIndex","wpm","setWpm","accuracy","setAccuracy","isTestComplete","setIsTestComplete","correctChars","setCorrectChars","totalChars","setTotalChars","startTime","setStartTime","textAreaRef","timerRef","sampleTexts","english","french","displayText","getTestDuration","mode","FIFTEEN_SECONDS","SIXTY_SECONDS","ONE_TWENTY_SECONDS","startTest","Date","current","setInterval","prev","resetTest","clearInterval","handleInput","e","value","currentTarget","length","correct","i","Math","round","timeElapsed","now","getTime","wordsTyped","currentWpm","resetTestFunction","getWordsAndLines","words","split","lines","currentLine","currentLineLength","maxLineLength","forEach","word","push","join","getCurrentLineInfo","charCount","currentLineIndex","lineEndIndex","startCharIndex","slice","getCharacterDisplay","visibleLines","max","startLineIndex","globalCharIndex","map","line","lineIndex","actualLineIndex","chars","globalIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","values","onClick","language","_textAreaRef$current","focus","ref","onChange","disabled","placeholder","_c","$RefreshReg$"],"sources":["C:/GitHub/TurboKeys/frontend/src/pages/Home.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { TestMode, Language } from '../types';\r\n\r\nconst Home: React.FC = () => {\r\n  const [selectedMode, setSelectedMode] = useState<TestMode>(TestMode.THIRTY_SECONDS);\r\n  const [selectedLanguage, setSelectedLanguage] = useState<Language>(Language.ENGLISH);\r\n  const [isTestActive, setIsTestActive] = useState(false);\r\n  const [timeLeft, setTimeLeft] = useState(30);\r\n  const [userInput, setUserInput] = useState('');\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [wpm, setWpm] = useState(0);\r\n  const [accuracy, setAccuracy] = useState(100);\r\n  const [isTestComplete, setIsTestComplete] = useState(false);\r\n  const [correctChars, setCorrectChars] = useState(0);\r\n  const [totalChars, setTotalChars] = useState(0);\r\n  const [startTime, setStartTime] = useState<Date | null>(null);\r\n  \r\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\r\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  // Sample texts for different languages - Long, realistic paragraphs\r\n  const sampleTexts = {\r\n    english: \"The art of communication has evolved dramatically throughout human history, transforming from simple gestures and sounds into sophisticated systems of written and spoken language. In today's digital age, the ability to type quickly and accurately has become an essential skill for personal and professional success. Whether you're writing emails, creating documents, programming software, or engaging in online conversations, your typing speed and accuracy directly impact your productivity and effectiveness. The development of muscle memory through consistent practice allows your fingers to move automatically across the keyboard, reducing the cognitive load required for typing and freeing your mind to focus on the content and ideas you want to express. Modern typing techniques emphasize proper posture, correct finger placement, and smooth, rhythmic keystrokes that minimize fatigue and maximize efficiency. Professional typists often achieve speeds of over one hundred words per minute while maintaining near-perfect accuracy, demonstrating the remarkable potential of human motor skills when properly trained and refined. The journey to becoming a skilled typist requires patience, dedication, and regular practice, but the rewards are substantial and long-lasting. Many successful writers, journalists, programmers, and business professionals credit their typing skills as a fundamental contributor to their career achievements. In an increasingly competitive job market, the ability to communicate quickly and effectively through written text has become a valuable asset that can set you apart from other candidates. Furthermore, the rise of remote work and digital collaboration has made typing skills even more crucial for professional success. Video conferences, instant messaging, collaborative documents, and project management tools all require efficient text input to maximize their effectiveness. The time invested in developing strong typing skills pays dividends throughout your entire career, making it one of the most practical and valuable abilities you can cultivate. Regular practice not only improves your speed and accuracy but also reduces the physical strain associated with prolonged keyboard use, helping to prevent repetitive stress injuries and maintain long-term hand and wrist health.\",\r\n    french: \"L'évolution de la technologie moderne a transformé notre façon de communiquer, de travailler et d'interagir avec le monde qui nous entoure. Dans cette ère numérique, la maîtrise du clavier est devenue une compétence fondamentale qui influence directement notre productivité et notre efficacité professionnelle. La France, avec sa riche tradition littéraire et culturelle, a toujours valorisé l'expression écrite comme un art noble et raffiné. Aujourd'hui, cette tradition se prolonge dans le domaine numérique, où la capacité à taper rapidement et précisément en français constitue un atout considérable pour les étudiants, les professionnels et les créateurs de contenu. Les particularités de la langue française, avec ses accents, ses cédilles et ses caractères spéciaux, exigent une attention particulière lors de l'apprentissage de la dactylographie. La disposition AZERTY, spécifique aux pays francophones, diffère significativement du clavier QWERTY anglo-saxon, nécessitant une adaptation particulière pour ceux qui passent d'un système à l'autre. Les techniques modernes d'apprentissage de la frappe intègrent des méthodes pédagogiques innovantes qui respectent les spécificités linguistiques du français tout en développant la mémoire musculaire nécessaire à une saisie fluide et naturelle. La pratique régulière de la dactylographie française permet non seulement d'améliorer la vitesse de frappe, mais aussi de renforcer la maîtrise orthographique et grammaticale de la langue. Cette double compétence s'avère particulièrement précieuse dans le contexte professionnel contemporain, où la communication écrite occupe une place centrale dans la plupart des métiers. Les secteurs du journalisme, de l'édition, de la traduction, du secrétariat et de la communication digitale requièrent tous une excellente maîtrise de la frappe française. L'apprentissage progressif et méthodique de cette compétence contribue également au développement de la concentration et de la discipline personnelle, qualités essentielles dans notre société de l'information où les distractions numériques sont omniprésentes. La capacité à produire rapidement du texte de qualité en français ouvre de nombreuses opportunités professionnelles et créatives, permettant aux individus de s'exprimer avec aisance et précision dans tous les contextes digitaux.\"\r\n  };\r\n\r\n  const displayText = sampleTexts[selectedLanguage];\r\n\r\n  // Get test duration\r\n  const getTestDuration = (mode: TestMode): number => {\r\n    switch (mode) {\r\n      case TestMode.FIFTEEN_SECONDS: return 15;\r\n      case TestMode.THIRTY_SECONDS: return 30;\r\n      case TestMode.SIXTY_SECONDS: return 60;\r\n      case TestMode.ONE_TWENTY_SECONDS: return 120;\r\n      default: return 30;\r\n    }\r\n  };\r\n\r\n  // Start test\r\n  const startTest = () => {\r\n    if (!isTestActive && !isTestComplete) {\r\n      setIsTestActive(true);\r\n      setStartTime(new Date());\r\n      setTimeLeft(getTestDuration(selectedMode));\r\n      \r\n      // Start timer\r\n      timerRef.current = setInterval(() => {\r\n        setTimeLeft(prev => {\r\n          if (prev <= 1) {\r\n            setIsTestActive(false);\r\n            setIsTestComplete(true);\r\n            return 0;\r\n          }\r\n          return prev - 1;\r\n        });\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  // Reset test\r\n  const resetTest = () => {\r\n    setIsTestActive(false);\r\n    setIsTestComplete(false);\r\n    setUserInput('');\r\n    setCurrentIndex(0);\r\n    setWpm(0);\r\n    setAccuracy(100);\r\n    setCorrectChars(0);\r\n    setTotalChars(0);\r\n    setStartTime(null);\r\n    setTimeLeft(getTestDuration(selectedMode));\r\n    \r\n    if (timerRef.current) {\r\n      clearInterval(timerRef.current);\r\n      timerRef.current = null;\r\n    }\r\n  };\r\n\r\n  // Handle input\r\n  const handleInput = (e: React.FormEvent<HTMLTextAreaElement>) => {\r\n    if (isTestComplete) return;\r\n    \r\n    const value = e.currentTarget.value;\r\n    \r\n    // Start test on first input\r\n    if (!isTestActive && value.length > 0) {\r\n      startTest();\r\n    }\r\n    \r\n    // If user reached the end of text, complete the test\r\n    if (value.length >= displayText.length) {\r\n      setIsTestActive(false);\r\n      setIsTestComplete(true);\r\n      if (timerRef.current) {\r\n        clearInterval(timerRef.current);\r\n        timerRef.current = null;\r\n      }\r\n      return;\r\n    }\r\n    \r\n    setUserInput(value);\r\n    setCurrentIndex(value.length);\r\n    \r\n    // Calculate accuracy\r\n    let correct = 0;\r\n    for (let i = 0; i < value.length && i < displayText.length; i++) {\r\n      if (value[i] === displayText[i]) {\r\n        correct++;\r\n      }\r\n    }\r\n    setCorrectChars(correct);\r\n    setTotalChars(value.length);\r\n    \r\n    if (value.length > 0) {\r\n      setAccuracy(Math.round((correct / value.length) * 100));\r\n    }\r\n  };\r\n\r\n  // Calculate WPM\r\n  useEffect(() => {\r\n    if (isTestActive && startTime) {\r\n      const timeElapsed = (Date.now() - startTime.getTime()) / 1000;\r\n      if (timeElapsed > 0) {\r\n        const wordsTyped = userInput.length / 5; // Standard: 5 characters = 1 word\r\n        const currentWpm = Math.round((wordsTyped / timeElapsed) * 60);\r\n        setWpm(currentWpm);\r\n      }\r\n    }\r\n  }, [userInput, isTestActive, startTime]);\r\n\r\n  // Reset when mode or language changes\r\n  useEffect(() => {\r\n    const resetTestFunction = () => {\r\n      setIsTestActive(false);\r\n      setIsTestComplete(false);\r\n      setUserInput('');\r\n      setCurrentIndex(0);\r\n      setWpm(0);\r\n      setAccuracy(100);\r\n      setCorrectChars(0);\r\n      setTotalChars(0);\r\n      setStartTime(null);\r\n      setTimeLeft(getTestDuration(selectedMode));\r\n      \r\n      if (timerRef.current) {\r\n        clearInterval(timerRef.current);\r\n        timerRef.current = null;\r\n      }\r\n    };\r\n    \r\n    resetTestFunction();\r\n  }, [selectedMode, selectedLanguage]);\r\n\r\n  // Cleanup\r\n  useEffect(() => {\r\n    return () => {\r\n      if (timerRef.current) {\r\n        clearInterval(timerRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Split text into words and lines for display\r\n  const getWordsAndLines = () => {\r\n    const words = displayText.split(' ');\r\n    const lines: string[] = [];\r\n    let currentLine: string[] = [];\r\n    let currentLineLength = 0;\r\n    const maxLineLength = 60; // Approximate characters per line\r\n    \r\n    words.forEach(word => {\r\n      if (currentLineLength + word.length + 1 > maxLineLength && currentLine.length > 0) {\r\n        lines.push(currentLine.join(' '));\r\n        currentLine = [word];\r\n        currentLineLength = word.length;\r\n      } else {\r\n        currentLine.push(word);\r\n        currentLineLength += word.length + (currentLine.length > 1 ? 1 : 0);\r\n      }\r\n    });\r\n    \r\n    if (currentLine.length > 0) {\r\n      lines.push(currentLine.join(' '));\r\n    }\r\n    \r\n    return lines;\r\n  };\r\n\r\n  // Get current line based on user input\r\n  const getCurrentLineInfo = () => {\r\n    const lines = getWordsAndLines();\r\n    let charCount = 0;\r\n    let currentLineIndex = 0;\r\n    \r\n    for (let i = 0; i < lines.length; i++) {\r\n      const lineEndIndex = charCount + lines[i].length + (i < lines.length - 1 ? 1 : 0); // +1 for space\r\n      if (currentIndex <= lineEndIndex) {\r\n        currentLineIndex = i;\r\n        break;\r\n      }\r\n      charCount += lines[i].length + 1; // +1 for space between lines\r\n    }\r\n    \r\n    return {\r\n      lines,\r\n      currentLineIndex,\r\n      startCharIndex: currentLineIndex === 0 ? 0 : lines.slice(0, currentLineIndex).join(' ').length + currentLineIndex\r\n    };\r\n  };\r\n\r\n  // Generate character display for visible lines only\r\n  const getCharacterDisplay = () => {\r\n    const { lines, currentLineIndex } = getCurrentLineInfo();\r\n    const visibleLines = lines.slice(Math.max(0, currentLineIndex - 1), currentLineIndex + 3);\r\n    const startLineIndex = Math.max(0, currentLineIndex - 1);\r\n    \r\n    let globalCharIndex = 0;\r\n    // Calculate starting character index for visible lines\r\n    for (let i = 0; i < startLineIndex; i++) {\r\n      globalCharIndex += lines[i].length + (i < lines.length - 1 ? 1 : 0);\r\n    }\r\n    \r\n    return visibleLines.map((line, lineIndex) => {\r\n      const actualLineIndex = startLineIndex + lineIndex;\r\n      const chars = [];\r\n      \r\n      for (let i = 0; i < line.length; i++) {\r\n        const globalIndex = globalCharIndex + i;\r\n        let className = 'text-gray-400';\r\n        \r\n        if (globalIndex < userInput.length) {\r\n          if (userInput[globalIndex] === displayText[globalIndex]) {\r\n            className = 'text-green-400';\r\n          } else {\r\n            className = 'text-red-400 bg-red-900/30';\r\n          }\r\n        } else if (globalIndex === currentIndex && isTestActive) {\r\n          className = 'bg-yellow-400 text-gray-900';\r\n        }\r\n        \r\n        chars.push(\r\n          <span key={globalIndex} className={className}>\r\n            {line[i]}\r\n          </span>\r\n        );\r\n      }\r\n      \r\n      globalCharIndex += line.length + (actualLineIndex < lines.length - 1 ? 1 : 0);\r\n      \r\n      return (\r\n        <div key={actualLineIndex} className=\"leading-relaxed\">\r\n          {chars}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-900 text-gray-300\">\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        {/* Header - More compact */}\r\n        <div className=\"text-center mb-12\">\r\n          <h1 className=\"text-3xl font-bold text-yellow-400 mb-2\">\r\n            TurboKeys\r\n          </h1>\r\n        </div>\r\n\r\n        {/* Mode Selection - Centered and compact */}\r\n        <div className=\"flex justify-center mb-12\">\r\n          <div className=\"flex flex-col items-center gap-6\">\r\n            <div className=\"flex flex-wrap gap-2 justify-center\">\r\n              {Object.values(TestMode).map((mode) => (\r\n                <button\r\n                  key={mode}\r\n                  onClick={() => {\r\n                    setSelectedMode(mode);\r\n                    resetTest();\r\n                  }}\r\n                  className={`px-4 py-2 rounded text-sm font-medium transition-colors ${\r\n                    selectedMode === mode\r\n                      ? 'bg-yellow-400 text-gray-900'\r\n                      : 'bg-gray-800 text-gray-400 hover:bg-gray-700 hover:text-gray-300'\r\n                  }`}\r\n                >\r\n                  {mode}\r\n                </button>\r\n              ))}\r\n            </div>\r\n\r\n            <div className=\"flex flex-wrap gap-2 justify-center\">\r\n              {Object.values(Language).map((language) => (\r\n                <button\r\n                  key={language}\r\n                  onClick={() => {\r\n                    setSelectedLanguage(language);\r\n                    resetTest();\r\n                  }}\r\n                  className={`px-4 py-2 rounded text-sm font-medium transition-colors ${\r\n                    selectedLanguage === language\r\n                      ? 'bg-yellow-400 text-gray-900'\r\n                      : 'bg-gray-800 text-gray-400 hover:bg-gray-700 hover:text-gray-300'\r\n                  }`}\r\n                >\r\n                  {language === 'french' ? 'Français' : 'English'}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Typing Test - Full width, no visible container like Monkeytype */}\r\n        <div className=\"max-w-[90%] mx-auto px-8\">\r\n          {/* Stats Display */}\r\n          <div className=\"flex justify-center space-x-8 mb-6\">\r\n            <div className=\"text-center\">\r\n              <div className=\"text-3xl font-bold text-yellow-400\">{timeLeft}</div>\r\n              <div className=\"text-sm text-gray-400\">Time</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-3xl font-bold text-yellow-400\">{wpm}</div>\r\n              <div className=\"text-sm text-gray-400\">WPM</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-3xl font-bold text-yellow-400\">{accuracy}%</div>\r\n              <div className=\"text-sm text-gray-400\">Accuracy</div>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Typing Area */}\r\n          <div \r\n            className=\"bg-gray-800 rounded-lg p-8 mb-6 min-h-[300px] relative cursor-text\"\r\n            onClick={() => textAreaRef.current?.focus()}\r\n          >\r\n            <div className=\"text-3xl leading-relaxed font-mono max-w-5xl mx-auto space-y-4\">\r\n              {getCharacterDisplay()}\r\n            </div>\r\n            \r\n            {/* Invisible textarea for input */}\r\n            <textarea\r\n              ref={textAreaRef}\r\n              value={userInput}\r\n              onChange={handleInput}\r\n              className=\"absolute inset-0 w-full h-full opacity-0 resize-none outline-none\"\r\n              disabled={isTestComplete}\r\n              placeholder=\"\"\r\n            />\r\n            \r\n            {/* Focus overlay */}\r\n            {!isTestActive && !isTestComplete && (\r\n              <div className=\"absolute inset-0 bg-gray-800 bg-opacity-90 rounded-lg flex items-center justify-center\">\r\n                <div className=\"text-center text-gray-400\">\r\n                  <p className=\"text-xl mb-2\">Click here to start typing</p>\r\n                  <p className=\"text-sm\">Selected: {selectedMode} • {selectedLanguage === 'french' ? 'Français' : 'English'}</p>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Test Complete Screen */}\r\n          {isTestComplete && (\r\n            <div className=\"text-center bg-gray-800 rounded-lg p-8 mb-6\">\r\n              <h2 className=\"text-2xl font-bold text-yellow-400 mb-4\">Test Complete!</h2>\r\n              <div className=\"grid grid-cols-3 gap-8 mb-6\">\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-3xl font-bold text-yellow-400\">{wpm}</div>\r\n                  <div className=\"text-sm text-gray-400\">WPM</div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-3xl font-bold text-green-400\">{accuracy}%</div>\r\n                  <div className=\"text-sm text-gray-400\">Accuracy</div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-3xl font-bold text-blue-400\">{correctChars}/{totalChars}</div>\r\n                  <div className=\"text-sm text-gray-400\">Correct</div>\r\n                </div>\r\n              </div>\r\n              <button \r\n                onClick={resetTest}\r\n                className=\"bg-yellow-400 text-gray-900 px-6 py-2 rounded font-medium hover:bg-yellow-300 transition-colors\"\r\n              >\r\n                Try Again\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          {!isTestActive && !isTestComplete && (\r\n            <div className=\"text-center text-gray-400 mb-4\">\r\n              <p className=\"text-sm\">Click on the text above to start typing</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Instructions - More compact and bottom */}\r\n        <div className=\"max-w-4xl mx-auto mt-16 text-center\">\r\n          <div className=\"text-sm text-gray-500 space-y-1\">\r\n            <p>Click on the text area to start • Type the words exactly as shown • Use backspace to correct mistakes</p>\r\n            <p>Your WPM and accuracy will be calculated in real-time</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}