{"ast":null,"code":"import{TestMode,Language}from'../types';// Mock data\nconst englishWords=['the','quick','brown','fox','jumps','over','lazy','dog','and','to','of','in','it','you','that','he','was','for','on','are','as','with','his','they','at','be','this','have','from','or','one','had','by','word','but','not','what','all','were','we','when','your','can','said','there','each','which','she','do','how','their','if','will','up','other','about','out','many','then','them','these','so','some','her','would','make','like','into','him','time','has','two','more','very','what','know','just','first','get','over','think','also','back','after','use','work','life','only','new','way','may','say','great','where','much','through','well','me','year','come'];const koreanWords=['그리고','하지만','그러나','또한','그래서','따라서','즉','예를','들어','만약','사람','시간','오늘','내일','어제','지금','여기','저기','어디','언제','무엇','누구','어떻게','왜','얼마나','어느','좋다','나쁘다','크다','작다','많다','적다','빠르다','느리다','높다','낮다','멀다','가깝다','쉽다','어렵다','아름답다','예쁘다','귀엽다','멋있다','재미있다','지루하다','행복하다','슬프다','화나다','무섭다','집','학교','회사','병원','은행','상점','시장','공원','도서관','카페','음식','물','커피','차','우유','과일','채소','고기','생선','빵','가족','친구','선생님','학생','의사','간호사','경찰','운전사','요리사','가수','읽다','쓰다','보다','듣다','말하다','걷다','뛰다','자다','일어나다','먹다','마시다','요리하다','청소하다','공부하다','일하다','놀다','운동하다','여행하다','쇼핑하다','만나다'];const getWordsByLanguage=language=>{switch(language){case Language.KOREAN:return koreanWords;case Language.ENGLISH:default:return englishWords;}};const mockUser={id:'1',username:'testuser',email:'test@example.com',firstName:'Test',lastName:'User',createdAt:new Date(),updatedAt:new Date()};const mockLeaderboard=[{id:'1',user:{id:'1',username:'SpeedTyper',profilePicture:undefined},wpm:120,accuracy:98,mode:TestMode.SIXTY_SECONDS,completedAt:new Date()},{id:'2',user:{id:'2',username:'FastFingers',profilePicture:undefined},wpm:115,accuracy:96,mode:TestMode.SIXTY_SECONDS,completedAt:new Date()},{id:'3',user:{id:'3',username:'QuickKeys',profilePicture:undefined},wpm:110,accuracy:99,mode:TestMode.SIXTY_SECONDS,completedAt:new Date()}];// Use mock API when backend is not available\nconst USE_MOCK_API=process.env.REACT_APP_USE_MOCK_API==='true'||!process.env.REACT_APP_API_URL;class MockAPIClient{constructor(){this.isLoggedIn=false;this.token='mock-jwt-token';}// Simulate API delay\ndelay(){let ms=arguments.length>0&&arguments[0]!==undefined?arguments[0]:500;return new Promise(resolve=>setTimeout(resolve,ms));}async login(credentials){await this.delay();if(credentials.email==='test@example.com'&&credentials.password==='password'){this.isLoggedIn=true;return{...mockUser,token:this.token};}throw new Error('Invalid email or password');}async register(userData){await this.delay();this.isLoggedIn=true;return{...mockUser,username:userData.username,email:userData.email,firstName:userData.firstName,lastName:userData.lastName,token:this.token};}async getCurrentUser(){await this.delay();if(!this.isLoggedIn){throw new Error('Not authenticated');}return mockUser;}getGoogleAuthUrl(){return'#';}getGitHubAuthUrl(){return'#';}async submitTypingTest(result){await this.delay();return{id:Date.now().toString(),userId:mockUser.id,completedAt:new Date(),...result};}async getUserTests(limit){await this.delay();// Return mock test results\nreturn[{id:'1',userId:mockUser.id,wpm:85,accuracy:96,charactersTyped:150,errorsCount:6,duration:30,mode:TestMode.THIRTY_SECONDS,language:'english',text:'Sample typing test text...',completedAt:new Date(Date.now()-86400000)// Yesterday\n},{id:'2',userId:mockUser.id,wpm:78,accuracy:94,charactersTyped:200,errorsCount:12,duration:60,mode:TestMode.SIXTY_SECONDS,language:'english',text:'Another sample typing test text...',completedAt:new Date(Date.now()-172800000)// 2 days ago\n}].slice(0,limit);}async getLeaderboard(mode){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;await this.delay();return mockLeaderboard.filter(entry=>entry.mode===mode).slice(0,limit);}async getWords(){let language=arguments.length>0&&arguments[0]!==undefined?arguments[0]:Language.ENGLISH;let count=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;await this.delay();const wordList=getWordsByLanguage(language);const shuffled=[...wordList].sort(()=>0.5-Math.random());return{words:shuffled.slice(0,Math.min(count,wordList.length)),language};}async updateProfile(userData){await this.delay();return{...mockUser,...userData,updatedAt:new Date()};}async getUserStats(){await this.delay();return{averageWpm:82,averageAccuracy:95,testsCompleted:15};}}export const mockAPIClient=new MockAPIClient();// Export mock API methods\nexport const mockAuthAPI={login:mockAPIClient.login.bind(mockAPIClient),register:mockAPIClient.register.bind(mockAPIClient),getCurrentUser:mockAPIClient.getCurrentUser.bind(mockAPIClient),getGoogleAuthUrl:mockAPIClient.getGoogleAuthUrl.bind(mockAPIClient),getGitHubAuthUrl:mockAPIClient.getGitHubAuthUrl.bind(mockAPIClient)};export const mockTypingAPI={submitTest:mockAPIClient.submitTypingTest.bind(mockAPIClient),getUserTests:mockAPIClient.getUserTests.bind(mockAPIClient),getLeaderboard:mockAPIClient.getLeaderboard.bind(mockAPIClient),getWords:mockAPIClient.getWords.bind(mockAPIClient)};export const mockUserAPI={updateProfile:mockAPIClient.updateProfile.bind(mockAPIClient),getUserStats:mockAPIClient.getUserStats.bind(mockAPIClient)};","map":{"version":3,"names":["TestMode","Language","englishWords","koreanWords","getWordsByLanguage","language","KOREAN","ENGLISH","mockUser","id","username","email","firstName","lastName","createdAt","Date","updatedAt","mockLeaderboard","user","profilePicture","undefined","wpm","accuracy","mode","SIXTY_SECONDS","completedAt","USE_MOCK_API","process","env","REACT_APP_USE_MOCK_API","REACT_APP_API_URL","MockAPIClient","constructor","isLoggedIn","token","delay","ms","arguments","length","Promise","resolve","setTimeout","login","credentials","password","Error","register","userData","getCurrentUser","getGoogleAuthUrl","getGitHubAuthUrl","submitTypingTest","result","now","toString","userId","getUserTests","limit","charactersTyped","errorsCount","duration","THIRTY_SECONDS","text","slice","getLeaderboard","filter","entry","getWords","count","wordList","shuffled","sort","Math","random","words","min","updateProfile","getUserStats","averageWpm","averageAccuracy","testsCompleted","mockAPIClient","mockAuthAPI","bind","mockTypingAPI","submitTest","mockUserAPI"],"sources":["C:/GitHub/TurboKeys/frontend/src/services/mockApi.ts"],"sourcesContent":["import { \r\n  User, \r\n  AuthUser, \r\n  LoginRequest, \r\n  RegisterRequest, \r\n  TypingTestResult, \r\n  LeaderboardEntry, \r\n  WordListResponse,\r\n  TestMode,\r\n  Language,\r\n  ApiResponse \r\n} from '../types';\r\n\r\n// Mock data\r\nconst englishWords = [\r\n  'the', 'quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog', 'and', 'to',\r\n  'of', 'in', 'it', 'you', 'that', 'he', 'was', 'for', 'on', 'are',\r\n  'as', 'with', 'his', 'they', 'at', 'be', 'this', 'have', 'from', 'or',\r\n  'one', 'had', 'by', 'word', 'but', 'not', 'what', 'all', 'were', 'we',\r\n  'when', 'your', 'can', 'said', 'there', 'each', 'which', 'she', 'do', 'how',\r\n  'their', 'if', 'will', 'up', 'other', 'about', 'out', 'many', 'then', 'them',\r\n  'these', 'so', 'some', 'her', 'would', 'make', 'like', 'into', 'him', 'time',\r\n  'has', 'two', 'more', 'very', 'what', 'know', 'just', 'first', 'get', 'over',\r\n  'think', 'also', 'back', 'after', 'use', 'work', 'life', 'only', 'new', 'way',\r\n  'may', 'say', 'great', 'where', 'much', 'through', 'well', 'me', 'year', 'come'\r\n];\r\n\r\nconst koreanWords = [\r\n  '그리고', '하지만', '그러나', '또한', '그래서', '따라서', '즉', '예를', '들어', '만약',\r\n  '사람', '시간', '오늘', '내일', '어제', '지금', '여기', '저기', '어디', '언제',\r\n  '무엇', '누구', '어떻게', '왜', '얼마나', '어느', '좋다', '나쁘다', '크다', '작다',\r\n  '많다', '적다', '빠르다', '느리다', '높다', '낮다', '멀다', '가깝다', '쉽다', '어렵다',\r\n  '아름답다', '예쁘다', '귀엽다', '멋있다', '재미있다', '지루하다', '행복하다', '슬프다', '화나다', '무섭다',\r\n  '집', '학교', '회사', '병원', '은행', '상점', '시장', '공원', '도서관', '카페',\r\n  '음식', '물', '커피', '차', '우유', '과일', '채소', '고기', '생선', '빵',\r\n  '가족', '친구', '선생님', '학생', '의사', '간호사', '경찰', '운전사', '요리사', '가수',\r\n  '읽다', '쓰다', '보다', '듣다', '말하다', '걷다', '뛰다', '자다', '일어나다', '먹다',\r\n  '마시다', '요리하다', '청소하다', '공부하다', '일하다', '놀다', '운동하다', '여행하다', '쇼핑하다', '만나다'\r\n];\r\n\r\nconst getWordsByLanguage = (language: Language): string[] => {\r\n  switch (language) {\r\n    case Language.KOREAN:\r\n      return koreanWords;\r\n    case Language.ENGLISH:\r\n    default:\r\n      return englishWords;\r\n  }\r\n};\r\n\r\nconst mockUser: User = {\r\n  id: '1',\r\n  username: 'testuser',\r\n  email: 'test@example.com',\r\n  firstName: 'Test',\r\n  lastName: 'User',\r\n  createdAt: new Date(),\r\n  updatedAt: new Date(),\r\n};\r\n\r\nconst mockLeaderboard: LeaderboardEntry[] = [\r\n  {\r\n    id: '1',\r\n    user: { id: '1', username: 'SpeedTyper', profilePicture: undefined },\r\n    wpm: 120,\r\n    accuracy: 98,\r\n    mode: TestMode.SIXTY_SECONDS,\r\n    completedAt: new Date(),\r\n  },\r\n  {\r\n    id: '2',\r\n    user: { id: '2', username: 'FastFingers', profilePicture: undefined },\r\n    wpm: 115,\r\n    accuracy: 96,\r\n    mode: TestMode.SIXTY_SECONDS,\r\n    completedAt: new Date(),\r\n  },\r\n  {\r\n    id: '3',\r\n    user: { id: '3', username: 'QuickKeys', profilePicture: undefined },\r\n    wpm: 110,\r\n    accuracy: 99,\r\n    mode: TestMode.SIXTY_SECONDS,\r\n    completedAt: new Date(),\r\n  },\r\n];\r\n\r\n// Use mock API when backend is not available\r\nconst USE_MOCK_API = process.env.REACT_APP_USE_MOCK_API === 'true' || !process.env.REACT_APP_API_URL;\r\n\r\nclass MockAPIClient {\r\n  private isLoggedIn = false;\r\n  private token = 'mock-jwt-token';\r\n\r\n  // Simulate API delay\r\n  private delay(ms: number = 500) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  async login(credentials: LoginRequest): Promise<AuthUser> {\r\n    await this.delay();\r\n    \r\n    if (credentials.email === 'test@example.com' && credentials.password === 'password') {\r\n      this.isLoggedIn = true;\r\n      return {\r\n        ...mockUser,\r\n        token: this.token,\r\n      };\r\n    }\r\n    \r\n    throw new Error('Invalid email or password');\r\n  }\r\n\r\n  async register(userData: RegisterRequest): Promise<AuthUser> {\r\n    await this.delay();\r\n    \r\n    this.isLoggedIn = true;\r\n    return {\r\n      ...mockUser,\r\n      username: userData.username,\r\n      email: userData.email,\r\n      firstName: userData.firstName,\r\n      lastName: userData.lastName,\r\n      token: this.token,\r\n    };\r\n  }\r\n\r\n  async getCurrentUser(): Promise<User> {\r\n    await this.delay();\r\n    \r\n    if (!this.isLoggedIn) {\r\n      throw new Error('Not authenticated');\r\n    }\r\n    \r\n    return mockUser;\r\n  }\r\n\r\n  getGoogleAuthUrl(): string {\r\n    return '#';\r\n  }\r\n\r\n  getGitHubAuthUrl(): string {\r\n    return '#';\r\n  }\r\n\r\n  async submitTypingTest(result: Omit<TypingTestResult, 'id' | 'userId' | 'completedAt'>): Promise<TypingTestResult> {\r\n    await this.delay();\r\n    \r\n    return {\r\n      id: Date.now().toString(),\r\n      userId: mockUser.id,\r\n      completedAt: new Date(),\r\n      ...result,\r\n    };\r\n  }\r\n\r\n  async getUserTests(limit?: number): Promise<TypingTestResult[]> {\r\n    await this.delay();\r\n    \r\n    // Return mock test results\r\n    return [\r\n      {\r\n        id: '1',\r\n        userId: mockUser.id,\r\n        wpm: 85,\r\n        accuracy: 96,\r\n        charactersTyped: 150,\r\n        errorsCount: 6,\r\n        duration: 30,\r\n        mode: TestMode.THIRTY_SECONDS,\r\n        language: 'english',\r\n        text: 'Sample typing test text...',\r\n        completedAt: new Date(Date.now() - 86400000), // Yesterday\r\n      },\r\n      {\r\n        id: '2',\r\n        userId: mockUser.id,\r\n        wpm: 78,\r\n        accuracy: 94,\r\n        charactersTyped: 200,\r\n        errorsCount: 12,\r\n        duration: 60,\r\n        mode: TestMode.SIXTY_SECONDS,\r\n        language: 'english',\r\n        text: 'Another sample typing test text...',\r\n        completedAt: new Date(Date.now() - 172800000), // 2 days ago\r\n      },\r\n    ].slice(0, limit);\r\n  }\r\n\r\n  async getLeaderboard(mode: TestMode, limit: number = 10): Promise<LeaderboardEntry[]> {\r\n    await this.delay();\r\n    \r\n    return mockLeaderboard\r\n      .filter(entry => entry.mode === mode)\r\n      .slice(0, limit);\r\n  }\r\n\r\n  async getWords(language: Language = Language.ENGLISH, count: number = 50): Promise<WordListResponse> {\r\n    await this.delay();\r\n    \r\n    const wordList = getWordsByLanguage(language);\r\n    const shuffled = [...wordList].sort(() => 0.5 - Math.random());\r\n    return {\r\n      words: shuffled.slice(0, Math.min(count, wordList.length)),\r\n      language,\r\n    };\r\n  }\r\n\r\n  async updateProfile(userData: Partial<User>): Promise<User> {\r\n    await this.delay();\r\n    \r\n    return {\r\n      ...mockUser,\r\n      ...userData,\r\n      updatedAt: new Date(),\r\n    };\r\n  }\r\n\r\n  async getUserStats(): Promise<any> {\r\n    await this.delay();\r\n    \r\n    return {\r\n      averageWpm: 82,\r\n      averageAccuracy: 95,\r\n      testsCompleted: 15,\r\n    };\r\n  }\r\n}\r\n\r\nexport const mockAPIClient = new MockAPIClient();\r\n\r\n// Export mock API methods\r\nexport const mockAuthAPI = {\r\n  login: mockAPIClient.login.bind(mockAPIClient),\r\n  register: mockAPIClient.register.bind(mockAPIClient),\r\n  getCurrentUser: mockAPIClient.getCurrentUser.bind(mockAPIClient),\r\n  getGoogleAuthUrl: mockAPIClient.getGoogleAuthUrl.bind(mockAPIClient),\r\n  getGitHubAuthUrl: mockAPIClient.getGitHubAuthUrl.bind(mockAPIClient),\r\n};\r\n\r\nexport const mockTypingAPI = {\r\n  submitTest: mockAPIClient.submitTypingTest.bind(mockAPIClient),\r\n  getUserTests: mockAPIClient.getUserTests.bind(mockAPIClient),\r\n  getLeaderboard: mockAPIClient.getLeaderboard.bind(mockAPIClient),\r\n  getWords: mockAPIClient.getWords.bind(mockAPIClient),\r\n};\r\n\r\nexport const mockUserAPI = {\r\n  updateProfile: mockAPIClient.updateProfile.bind(mockAPIClient),\r\n  getUserStats: mockAPIClient.getUserStats.bind(mockAPIClient),\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}