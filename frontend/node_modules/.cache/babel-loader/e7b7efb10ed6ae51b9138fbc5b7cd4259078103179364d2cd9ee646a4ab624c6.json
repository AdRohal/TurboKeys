{"ast":null,"code":"import { TestMode, Language } from '../types';\n\n// Mock data\nconst englishWords = ['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog', 'and', 'to', 'of', 'in', 'it', 'you', 'that', 'he', 'was', 'for', 'on', 'are', 'as', 'with', 'his', 'they', 'at', 'be', 'this', 'have', 'from', 'or', 'one', 'had', 'by', 'word', 'but', 'not', 'what', 'all', 'were', 'we', 'when', 'your', 'can', 'said', 'there', 'each', 'which', 'she', 'do', 'how', 'their', 'if', 'will', 'up', 'other', 'about', 'out', 'many', 'then', 'them', 'these', 'so', 'some', 'her', 'would', 'make', 'like', 'into', 'him', 'time', 'has', 'two', 'more', 'very', 'what', 'know', 'just', 'first', 'get', 'over', 'think', 'also', 'back', 'after', 'use', 'work', 'life', 'only', 'new', 'way', 'may', 'say', 'great', 'where', 'much', 'through', 'well', 'me', 'year', 'come'];\nconst frenchWords = ['être', 'avoir', 'faire', 'dire', 'aller', 'voir', 'savoir', 'prendre', 'venir', 'vouloir', 'pouvoir', 'falloir', 'devoir', 'croire', 'trouver', 'donner', 'parler', 'aimer', 'passer', 'mettre', 'regarder', 'suivre', 'connaître', 'paraître', 'partir', 'sortir', 'tenir', 'ouvrir', 'porter', 'vivre', 'écrire', 'lire', 'comprendre', 'entendre', 'apprendre', 'répondre', 'attendre', 'perdre', 'rendre', 'descendre', 'temps', 'personne', 'année', 'main', 'jour', 'moment', 'pays', 'monde', 'place', 'nombre', 'eau', 'terre', 'air', 'feu', 'homme', 'femme', 'enfant', 'ami', 'famille', 'maison', 'ville', 'route', 'voiture', 'train', 'avion', 'bateau', 'travail', 'école', 'livre', 'papier', 'chien', 'chat', 'cheval', 'animal', 'arbre', 'fleur', 'jardin', 'forêt', 'mer', 'montagne', 'bon', 'mauvais', 'grand', 'petit', 'nouveau', 'vieux', 'jeune', 'beau', 'joli', 'blanc', 'noir', 'rouge', 'bleu', 'vert', 'jaune', 'orange', 'violet', 'rose', 'gris', 'marron', 'aujourd', 'demain', 'hier', 'maintenant', 'toujours', 'jamais', 'souvent', 'parfois', 'alors', 'puis', 'après', 'avant', 'pendant', 'depuis', 'jusqu', 'vers', 'chez', 'avec', 'sans', 'pour', 'contre', 'sous', 'sur', 'dans', 'entre', 'parmi', 'autour', 'près', 'loin', 'devant', 'derrière', 'dessus', 'dessous', 'dedans', 'dehors', 'ailleurs', 'partout', 'nulle', 'quelque', 'chaque'];\nconst getWordsByLanguage = language => {\n  switch (language) {\n    case Language.FRENCH:\n      return frenchWords;\n    case Language.ENGLISH:\n    default:\n      return englishWords;\n  }\n};\nconst mockUser = {\n  id: '1',\n  username: 'testuser',\n  email: 'test@example.com',\n  firstName: 'Test',\n  lastName: 'User',\n  createdAt: new Date(),\n  updatedAt: new Date()\n};\nconst mockLeaderboard = [{\n  id: '1',\n  user: {\n    id: '1',\n    username: 'SpeedTyper',\n    profilePicture: undefined\n  },\n  wpm: 120,\n  accuracy: 98,\n  mode: TestMode.SIXTY_SECONDS,\n  completedAt: new Date()\n}, {\n  id: '2',\n  user: {\n    id: '2',\n    username: 'FastFingers',\n    profilePicture: undefined\n  },\n  wpm: 115,\n  accuracy: 96,\n  mode: TestMode.SIXTY_SECONDS,\n  completedAt: new Date()\n}, {\n  id: '3',\n  user: {\n    id: '3',\n    username: 'QuickKeys',\n    profilePicture: undefined\n  },\n  wpm: 110,\n  accuracy: 99,\n  mode: TestMode.SIXTY_SECONDS,\n  completedAt: new Date()\n}];\n\n// Use mock API when backend is not available\nconst USE_MOCK_API = process.env.REACT_APP_USE_MOCK_API === 'true' || !process.env.REACT_APP_API_URL;\nclass MockAPIClient {\n  constructor() {\n    this.isLoggedIn = false;\n    this.token = 'mock-jwt-token';\n  }\n  // Simulate API delay\n  delay(ms = 500) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  async login(credentials) {\n    await this.delay();\n    if (credentials.email === 'test@example.com' && credentials.password === 'password') {\n      this.isLoggedIn = true;\n      return {\n        ...mockUser,\n        token: this.token\n      };\n    }\n    throw new Error('Invalid email or password');\n  }\n  async register(userData) {\n    await this.delay();\n    this.isLoggedIn = true;\n    return {\n      ...mockUser,\n      username: userData.username,\n      email: userData.email,\n      firstName: userData.firstName,\n      lastName: userData.lastName,\n      token: this.token\n    };\n  }\n  async getCurrentUser() {\n    await this.delay();\n    if (!this.isLoggedIn) {\n      throw new Error('Not authenticated');\n    }\n    return mockUser;\n  }\n  getGoogleAuthUrl() {\n    return '#';\n  }\n  getGitHubAuthUrl() {\n    return '#';\n  }\n  async submitTypingTest(result) {\n    await this.delay();\n    return {\n      id: Date.now().toString(),\n      userId: mockUser.id,\n      completedAt: new Date(),\n      ...result\n    };\n  }\n  async getUserTests(limit) {\n    await this.delay();\n\n    // Return mock test results\n    return [{\n      id: '1',\n      userId: mockUser.id,\n      wpm: 85,\n      accuracy: 96,\n      charactersTyped: 150,\n      errorsCount: 6,\n      duration: 30,\n      mode: TestMode.THIRTY_SECONDS,\n      language: 'english',\n      text: 'Sample typing test text...',\n      completedAt: new Date(Date.now() - 86400000) // Yesterday\n    }, {\n      id: '2',\n      userId: mockUser.id,\n      wpm: 78,\n      accuracy: 94,\n      charactersTyped: 200,\n      errorsCount: 12,\n      duration: 60,\n      mode: TestMode.SIXTY_SECONDS,\n      language: 'english',\n      text: 'Another sample typing test text...',\n      completedAt: new Date(Date.now() - 172800000) // 2 days ago\n    }].slice(0, limit);\n  }\n  async getLeaderboard(mode, limit = 10) {\n    await this.delay();\n    return mockLeaderboard.filter(entry => entry.mode === mode).slice(0, limit);\n  }\n  async getWords(language = Language.ENGLISH, count = 50) {\n    await this.delay();\n    const wordList = getWordsByLanguage(language);\n    const shuffled = [...wordList].sort(() => 0.5 - Math.random());\n    return {\n      words: shuffled.slice(0, Math.min(count, wordList.length)),\n      language\n    };\n  }\n  async updateProfile(userData) {\n    await this.delay();\n    return {\n      ...mockUser,\n      ...userData,\n      updatedAt: new Date()\n    };\n  }\n  async getUserStats() {\n    await this.delay();\n    return {\n      averageWpm: 82,\n      averageAccuracy: 95,\n      testsCompleted: 15\n    };\n  }\n}\nexport const mockAPIClient = new MockAPIClient();\n\n// Export mock API methods\nexport const mockAuthAPI = {\n  login: mockAPIClient.login.bind(mockAPIClient),\n  register: mockAPIClient.register.bind(mockAPIClient),\n  getCurrentUser: mockAPIClient.getCurrentUser.bind(mockAPIClient),\n  getGoogleAuthUrl: mockAPIClient.getGoogleAuthUrl.bind(mockAPIClient),\n  getGitHubAuthUrl: mockAPIClient.getGitHubAuthUrl.bind(mockAPIClient)\n};\nexport const mockTypingAPI = {\n  submitTest: mockAPIClient.submitTypingTest.bind(mockAPIClient),\n  getUserTests: mockAPIClient.getUserTests.bind(mockAPIClient),\n  getLeaderboard: mockAPIClient.getLeaderboard.bind(mockAPIClient),\n  getWords: mockAPIClient.getWords.bind(mockAPIClient)\n};\nexport const mockUserAPI = {\n  updateProfile: mockAPIClient.updateProfile.bind(mockAPIClient),\n  getUserStats: mockAPIClient.getUserStats.bind(mockAPIClient)\n};","map":{"version":3,"names":["TestMode","Language","englishWords","frenchWords","getWordsByLanguage","language","FRENCH","ENGLISH","mockUser","id","username","email","firstName","lastName","createdAt","Date","updatedAt","mockLeaderboard","user","profilePicture","undefined","wpm","accuracy","mode","SIXTY_SECONDS","completedAt","USE_MOCK_API","process","env","REACT_APP_USE_MOCK_API","REACT_APP_API_URL","MockAPIClient","constructor","isLoggedIn","token","delay","ms","Promise","resolve","setTimeout","login","credentials","password","Error","register","userData","getCurrentUser","getGoogleAuthUrl","getGitHubAuthUrl","submitTypingTest","result","now","toString","userId","getUserTests","limit","charactersTyped","errorsCount","duration","THIRTY_SECONDS","text","slice","getLeaderboard","filter","entry","getWords","count","wordList","shuffled","sort","Math","random","words","min","length","updateProfile","getUserStats","averageWpm","averageAccuracy","testsCompleted","mockAPIClient","mockAuthAPI","bind","mockTypingAPI","submitTest","mockUserAPI"],"sources":["C:/GitHub/TurboKeys/frontend/src/services/mockApi.ts"],"sourcesContent":["import { \r\n  User, \r\n  AuthUser, \r\n  LoginRequest, \r\n  RegisterRequest, \r\n  TypingTestResult, \r\n  LeaderboardEntry, \r\n  WordListResponse,\r\n  TestMode,\r\n  Language,\r\n  ApiResponse \r\n} from '../types';\r\n\r\n// Mock data\r\nconst englishWords = [\r\n  'the', 'quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog', 'and', 'to',\r\n  'of', 'in', 'it', 'you', 'that', 'he', 'was', 'for', 'on', 'are',\r\n  'as', 'with', 'his', 'they', 'at', 'be', 'this', 'have', 'from', 'or',\r\n  'one', 'had', 'by', 'word', 'but', 'not', 'what', 'all', 'were', 'we',\r\n  'when', 'your', 'can', 'said', 'there', 'each', 'which', 'she', 'do', 'how',\r\n  'their', 'if', 'will', 'up', 'other', 'about', 'out', 'many', 'then', 'them',\r\n  'these', 'so', 'some', 'her', 'would', 'make', 'like', 'into', 'him', 'time',\r\n  'has', 'two', 'more', 'very', 'what', 'know', 'just', 'first', 'get', 'over',\r\n  'think', 'also', 'back', 'after', 'use', 'work', 'life', 'only', 'new', 'way',\r\n  'may', 'say', 'great', 'where', 'much', 'through', 'well', 'me', 'year', 'come'\r\n];\r\n\r\nconst frenchWords = [\r\n  'être', 'avoir', 'faire', 'dire', 'aller', 'voir', 'savoir', 'prendre', 'venir', 'vouloir',\r\n  'pouvoir', 'falloir', 'devoir', 'croire', 'trouver', 'donner', 'parler', 'aimer', 'passer', 'mettre',\r\n  'regarder', 'suivre', 'connaître', 'paraître', 'partir', 'sortir', 'tenir', 'ouvrir', 'porter', 'vivre',\r\n  'écrire', 'lire', 'comprendre', 'entendre', 'apprendre', 'répondre', 'attendre', 'perdre', 'rendre', 'descendre',\r\n  'temps', 'personne', 'année', 'main', 'jour', 'moment', 'pays', 'monde', 'place', 'nombre',\r\n  'eau', 'terre', 'air', 'feu', 'homme', 'femme', 'enfant', 'ami', 'famille', 'maison',\r\n  'ville', 'route', 'voiture', 'train', 'avion', 'bateau', 'travail', 'école', 'livre', 'papier',\r\n  'chien', 'chat', 'cheval', 'animal', 'arbre', 'fleur', 'jardin', 'forêt', 'mer', 'montagne',\r\n  'bon', 'mauvais', 'grand', 'petit', 'nouveau', 'vieux', 'jeune', 'beau', 'joli', 'blanc',\r\n  'noir', 'rouge', 'bleu', 'vert', 'jaune', 'orange', 'violet', 'rose', 'gris', 'marron',\r\n  'aujourd', 'demain', 'hier', 'maintenant', 'toujours', 'jamais', 'souvent', 'parfois', 'alors', 'puis',\r\n  'après', 'avant', 'pendant', 'depuis', 'jusqu', 'vers', 'chez', 'avec', 'sans', 'pour',\r\n  'contre', 'sous', 'sur', 'dans', 'entre', 'parmi', 'autour', 'près', 'loin', 'devant',\r\n  'derrière', 'dessus', 'dessous', 'dedans', 'dehors', 'ailleurs', 'partout', 'nulle', 'quelque', 'chaque'\r\n];\r\n\r\nconst getWordsByLanguage = (language: Language): string[] => {\r\n  switch (language) {\r\n    case Language.FRENCH:\r\n      return frenchWords;\r\n    case Language.ENGLISH:\r\n    default:\r\n      return englishWords;\r\n  }\r\n};\r\n\r\nconst mockUser: User = {\r\n  id: '1',\r\n  username: 'testuser',\r\n  email: 'test@example.com',\r\n  firstName: 'Test',\r\n  lastName: 'User',\r\n  createdAt: new Date(),\r\n  updatedAt: new Date(),\r\n};\r\n\r\nconst mockLeaderboard: LeaderboardEntry[] = [\r\n  {\r\n    id: '1',\r\n    user: { id: '1', username: 'SpeedTyper', profilePicture: undefined },\r\n    wpm: 120,\r\n    accuracy: 98,\r\n    mode: TestMode.SIXTY_SECONDS,\r\n    completedAt: new Date(),\r\n  },\r\n  {\r\n    id: '2',\r\n    user: { id: '2', username: 'FastFingers', profilePicture: undefined },\r\n    wpm: 115,\r\n    accuracy: 96,\r\n    mode: TestMode.SIXTY_SECONDS,\r\n    completedAt: new Date(),\r\n  },\r\n  {\r\n    id: '3',\r\n    user: { id: '3', username: 'QuickKeys', profilePicture: undefined },\r\n    wpm: 110,\r\n    accuracy: 99,\r\n    mode: TestMode.SIXTY_SECONDS,\r\n    completedAt: new Date(),\r\n  },\r\n];\r\n\r\n// Use mock API when backend is not available\r\nconst USE_MOCK_API = process.env.REACT_APP_USE_MOCK_API === 'true' || !process.env.REACT_APP_API_URL;\r\n\r\nclass MockAPIClient {\r\n  private isLoggedIn = false;\r\n  private token = 'mock-jwt-token';\r\n\r\n  // Simulate API delay\r\n  private delay(ms: number = 500) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  async login(credentials: LoginRequest): Promise<AuthUser> {\r\n    await this.delay();\r\n    \r\n    if (credentials.email === 'test@example.com' && credentials.password === 'password') {\r\n      this.isLoggedIn = true;\r\n      return {\r\n        ...mockUser,\r\n        token: this.token,\r\n      };\r\n    }\r\n    \r\n    throw new Error('Invalid email or password');\r\n  }\r\n\r\n  async register(userData: RegisterRequest): Promise<AuthUser> {\r\n    await this.delay();\r\n    \r\n    this.isLoggedIn = true;\r\n    return {\r\n      ...mockUser,\r\n      username: userData.username,\r\n      email: userData.email,\r\n      firstName: userData.firstName,\r\n      lastName: userData.lastName,\r\n      token: this.token,\r\n    };\r\n  }\r\n\r\n  async getCurrentUser(): Promise<User> {\r\n    await this.delay();\r\n    \r\n    if (!this.isLoggedIn) {\r\n      throw new Error('Not authenticated');\r\n    }\r\n    \r\n    return mockUser;\r\n  }\r\n\r\n  getGoogleAuthUrl(): string {\r\n    return '#';\r\n  }\r\n\r\n  getGitHubAuthUrl(): string {\r\n    return '#';\r\n  }\r\n\r\n  async submitTypingTest(result: Omit<TypingTestResult, 'id' | 'userId' | 'completedAt'>): Promise<TypingTestResult> {\r\n    await this.delay();\r\n    \r\n    return {\r\n      id: Date.now().toString(),\r\n      userId: mockUser.id,\r\n      completedAt: new Date(),\r\n      ...result,\r\n    };\r\n  }\r\n\r\n  async getUserTests(limit?: number): Promise<TypingTestResult[]> {\r\n    await this.delay();\r\n    \r\n    // Return mock test results\r\n    return [\r\n      {\r\n        id: '1',\r\n        userId: mockUser.id,\r\n        wpm: 85,\r\n        accuracy: 96,\r\n        charactersTyped: 150,\r\n        errorsCount: 6,\r\n        duration: 30,\r\n        mode: TestMode.THIRTY_SECONDS,\r\n        language: 'english',\r\n        text: 'Sample typing test text...',\r\n        completedAt: new Date(Date.now() - 86400000), // Yesterday\r\n      },\r\n      {\r\n        id: '2',\r\n        userId: mockUser.id,\r\n        wpm: 78,\r\n        accuracy: 94,\r\n        charactersTyped: 200,\r\n        errorsCount: 12,\r\n        duration: 60,\r\n        mode: TestMode.SIXTY_SECONDS,\r\n        language: 'english',\r\n        text: 'Another sample typing test text...',\r\n        completedAt: new Date(Date.now() - 172800000), // 2 days ago\r\n      },\r\n    ].slice(0, limit);\r\n  }\r\n\r\n  async getLeaderboard(mode: TestMode, limit: number = 10): Promise<LeaderboardEntry[]> {\r\n    await this.delay();\r\n    \r\n    return mockLeaderboard\r\n      .filter(entry => entry.mode === mode)\r\n      .slice(0, limit);\r\n  }\r\n\r\n  async getWords(language: Language = Language.ENGLISH, count: number = 50): Promise<WordListResponse> {\r\n    await this.delay();\r\n    \r\n    const wordList = getWordsByLanguage(language);\r\n    const shuffled = [...wordList].sort(() => 0.5 - Math.random());\r\n    return {\r\n      words: shuffled.slice(0, Math.min(count, wordList.length)),\r\n      language,\r\n    };\r\n  }\r\n\r\n  async updateProfile(userData: Partial<User>): Promise<User> {\r\n    await this.delay();\r\n    \r\n    return {\r\n      ...mockUser,\r\n      ...userData,\r\n      updatedAt: new Date(),\r\n    };\r\n  }\r\n\r\n  async getUserStats(): Promise<any> {\r\n    await this.delay();\r\n    \r\n    return {\r\n      averageWpm: 82,\r\n      averageAccuracy: 95,\r\n      testsCompleted: 15,\r\n    };\r\n  }\r\n}\r\n\r\nexport const mockAPIClient = new MockAPIClient();\r\n\r\n// Export mock API methods\r\nexport const mockAuthAPI = {\r\n  login: mockAPIClient.login.bind(mockAPIClient),\r\n  register: mockAPIClient.register.bind(mockAPIClient),\r\n  getCurrentUser: mockAPIClient.getCurrentUser.bind(mockAPIClient),\r\n  getGoogleAuthUrl: mockAPIClient.getGoogleAuthUrl.bind(mockAPIClient),\r\n  getGitHubAuthUrl: mockAPIClient.getGitHubAuthUrl.bind(mockAPIClient),\r\n};\r\n\r\nexport const mockTypingAPI = {\r\n  submitTest: mockAPIClient.submitTypingTest.bind(mockAPIClient),\r\n  getUserTests: mockAPIClient.getUserTests.bind(mockAPIClient),\r\n  getLeaderboard: mockAPIClient.getLeaderboard.bind(mockAPIClient),\r\n  getWords: mockAPIClient.getWords.bind(mockAPIClient),\r\n};\r\n\r\nexport const mockUserAPI = {\r\n  updateProfile: mockAPIClient.updateProfile.bind(mockAPIClient),\r\n  getUserStats: mockAPIClient.getUserStats.bind(mockAPIClient),\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}