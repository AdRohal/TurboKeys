{"ast":null,"code":"import axios from 'axios';\nimport { Language } from '../types';\nimport { mockAuthAPI, mockTypingAPI, mockUserAPI } from './mockApi';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8081/api';\nconst USE_MOCK_API = process.env.REACT_APP_USE_MOCK_API === 'true';\nclass APIClient {\n  constructor() {\n    this.client = void 0;\n    this.client = axios.create({\n      baseURL: API_BASE_URL,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Add auth token to requests\n    this.client.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n\n    // Handle auth errors\n    this.client.interceptors.response.use(response => response, error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        localStorage.removeItem('token');\n        window.location.href = '/login';\n      }\n      return Promise.reject(error);\n    });\n  }\n  async handleResponse(response) {\n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    }\n    throw new Error(response.data.error || response.data.message || 'API request failed');\n  }\n\n  // Check if backend is available\n  async isBackendAvailable() {\n    if (USE_MOCK_API) return false;\n    try {\n      await this.client.get('/health', {\n        timeout: 2000\n      });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  // Auth endpoints\n  async login(credentials) {\n    if (!(await this.isBackendAvailable())) {\n      return mockAuthAPI.login(credentials);\n    }\n    const response = await this.client.post('/auth/login', credentials);\n    return this.handleResponse(response);\n  }\n  async register(userData) {\n    if (!(await this.isBackendAvailable())) {\n      return mockAuthAPI.register(userData);\n    }\n    const response = await this.client.post('/auth/register', userData);\n    return this.handleResponse(response);\n  }\n  async getCurrentUser() {\n    if (!(await this.isBackendAvailable())) {\n      return mockAuthAPI.getCurrentUser();\n    }\n    const response = await this.client.get('/auth/me');\n    return this.handleResponse(response);\n  }\n\n  // OAuth endpoints\n  getGoogleAuthUrl() {\n    if (USE_MOCK_API) return mockAuthAPI.getGoogleAuthUrl();\n    return `${API_BASE_URL}/auth/oauth2/google`;\n  }\n  getGitHubAuthUrl() {\n    if (USE_MOCK_API) return mockAuthAPI.getGitHubAuthUrl();\n    return `${API_BASE_URL}/auth/oauth2/github`;\n  }\n\n  // Typing test endpoints\n  async submitTypingTest(result) {\n    if (!(await this.isBackendAvailable())) {\n      return mockTypingAPI.submitTest(result);\n    }\n    const response = await this.client.post('/tests/submit', result);\n    return this.handleResponse(response);\n  }\n  async getUserTests(limit) {\n    if (!(await this.isBackendAvailable())) {\n      return mockTypingAPI.getUserTests(limit);\n    }\n    const response = await this.client.get(`/tests/user${limit ? `?limit=${limit}` : ''}`);\n    return this.handleResponse(response);\n  }\n  async getLeaderboard(mode, limit = 10) {\n    if (!(await this.isBackendAvailable())) {\n      return mockTypingAPI.getLeaderboard(mode, limit);\n    }\n    const response = await this.client.get(`/tests/leaderboard?mode=${mode}&limit=${limit}`);\n    return this.handleResponse(response);\n  }\n\n  // Words endpoints\n  async getWords(language = Language.ENGLISH, count = 50) {\n    if (!(await this.isBackendAvailable())) {\n      return mockTypingAPI.getWords(language, count);\n    }\n    const response = await this.client.get(`/words?language=${language}&count=${count}`);\n    return this.handleResponse(response);\n  }\n\n  // User profile endpoints\n  async updateProfile(userData) {\n    if (!(await this.isBackendAvailable())) {\n      return mockUserAPI.updateProfile(userData);\n    }\n    const response = await this.client.put('/users/profile', userData);\n    return this.handleResponse(response);\n  }\n  async getUserStats() {\n    if (!(await this.isBackendAvailable())) {\n      return mockUserAPI.getUserStats();\n    }\n    const response = await this.client.get('/users/stats');\n    return this.handleResponse(response);\n  }\n}\nexport const apiClient = new APIClient();\n\n// Convenience exports\nexport const authAPI = {\n  login: apiClient.login.bind(apiClient),\n  register: apiClient.register.bind(apiClient),\n  getCurrentUser: apiClient.getCurrentUser.bind(apiClient),\n  getGoogleAuthUrl: apiClient.getGoogleAuthUrl.bind(apiClient),\n  getGitHubAuthUrl: apiClient.getGitHubAuthUrl.bind(apiClient)\n};\nexport const typingAPI = {\n  submitTest: apiClient.submitTypingTest.bind(apiClient),\n  getUserTests: apiClient.getUserTests.bind(apiClient),\n  getLeaderboard: apiClient.getLeaderboard.bind(apiClient),\n  getWords: apiClient.getWords.bind(apiClient)\n};\nexport const userAPI = {\n  updateProfile: apiClient.updateProfile.bind(apiClient),\n  getUserStats: apiClient.getUserStats.bind(apiClient)\n};","map":{"version":3,"names":["axios","Language","mockAuthAPI","mockTypingAPI","mockUserAPI","API_BASE_URL","process","env","REACT_APP_API_URL","USE_MOCK_API","REACT_APP_USE_MOCK_API","APIClient","constructor","client","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","handleResponse","data","success","Error","message","isBackendAvailable","get","timeout","login","credentials","post","register","userData","getCurrentUser","getGoogleAuthUrl","getGitHubAuthUrl","submitTypingTest","result","submitTest","getUserTests","limit","getLeaderboard","mode","getWords","language","ENGLISH","count","updateProfile","put","getUserStats","apiClient","authAPI","bind","typingAPI","userAPI"],"sources":["C:/GitHub/TurboKeys/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\r\nimport { \r\n  User, \r\n  AuthUser, \r\n  LoginRequest, \r\n  RegisterRequest, \r\n  TypingTestResult, \r\n  LeaderboardEntry, \r\n  WordListResponse,\r\n  TestMode,\r\n  Language,\r\n  ApiResponse \r\n} from '../types';\r\nimport { mockAuthAPI, mockTypingAPI, mockUserAPI } from './mockApi';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8081/api';\r\nconst USE_MOCK_API = process.env.REACT_APP_USE_MOCK_API === 'true';\r\n\r\nclass APIClient {\r\n  private client: AxiosInstance;\r\n\r\n  constructor() {\r\n    this.client = axios.create({\r\n      baseURL: API_BASE_URL,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Add auth token to requests\r\n    this.client.interceptors.request.use((config) => {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n      }\r\n      return config;\r\n    });\r\n\r\n    // Handle auth errors\r\n    this.client.interceptors.response.use(\r\n      (response) => response,\r\n      (error) => {\r\n        if (error.response?.status === 401) {\r\n          localStorage.removeItem('token');\r\n          window.location.href = '/login';\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  private async handleResponse<T>(response: AxiosResponse<ApiResponse<T>>): Promise<T> {\r\n    if (response.data.success && response.data.data) {\r\n      return response.data.data;\r\n    }\r\n    throw new Error(response.data.error || response.data.message || 'API request failed');\r\n  }\r\n\r\n  // Check if backend is available\r\n  private async isBackendAvailable(): Promise<boolean> {\r\n    if (USE_MOCK_API) return false;\r\n    \r\n    try {\r\n      await this.client.get('/health', { timeout: 2000 });\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Auth endpoints\r\n  async login(credentials: LoginRequest): Promise<AuthUser> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockAuthAPI.login(credentials);\r\n    }\r\n    \r\n    const response = await this.client.post<ApiResponse<AuthUser>>('/auth/login', credentials);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async register(userData: RegisterRequest): Promise<AuthUser> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockAuthAPI.register(userData);\r\n    }\r\n    \r\n    const response = await this.client.post<ApiResponse<AuthUser>>('/auth/register', userData);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getCurrentUser(): Promise<User> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockAuthAPI.getCurrentUser();\r\n    }\r\n    \r\n    const response = await this.client.get<ApiResponse<User>>('/auth/me');\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  // OAuth endpoints\r\n  getGoogleAuthUrl(): string {\r\n    if (USE_MOCK_API) return mockAuthAPI.getGoogleAuthUrl();\r\n    return `${API_BASE_URL}/auth/oauth2/google`;\r\n  }\r\n\r\n  getGitHubAuthUrl(): string {\r\n    if (USE_MOCK_API) return mockAuthAPI.getGitHubAuthUrl();\r\n    return `${API_BASE_URL}/auth/oauth2/github`;\r\n  }\r\n\r\n  // Typing test endpoints\r\n  async submitTypingTest(result: Omit<TypingTestResult, 'id' | 'userId' | 'completedAt'>): Promise<TypingTestResult> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockTypingAPI.submitTest(result);\r\n    }\r\n    \r\n    const response = await this.client.post<ApiResponse<TypingTestResult>>('/tests/submit', result);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getUserTests(limit?: number): Promise<TypingTestResult[]> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockTypingAPI.getUserTests(limit);\r\n    }\r\n    \r\n    const response = await this.client.get<ApiResponse<TypingTestResult[]>>(`/tests/user${limit ? `?limit=${limit}` : ''}`);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getLeaderboard(mode: TestMode, limit: number = 10): Promise<LeaderboardEntry[]> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockTypingAPI.getLeaderboard(mode, limit);\r\n    }\r\n    \r\n    const response = await this.client.get<ApiResponse<LeaderboardEntry[]>>(`/tests/leaderboard?mode=${mode}&limit=${limit}`);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  // Words endpoints\r\n  async getWords(language: Language = Language.ENGLISH, count: number = 50): Promise<WordListResponse> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockTypingAPI.getWords(language, count);\r\n    }\r\n    \r\n    const response = await this.client.get<ApiResponse<WordListResponse>>(`/words?language=${language}&count=${count}`);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  // User profile endpoints\r\n  async updateProfile(userData: Partial<User>): Promise<User> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockUserAPI.updateProfile(userData);\r\n    }\r\n    \r\n    const response = await this.client.put<ApiResponse<User>>('/users/profile', userData);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getUserStats(): Promise<any> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockUserAPI.getUserStats();\r\n    }\r\n    \r\n    const response = await this.client.get<ApiResponse<any>>('/users/stats');\r\n    return this.handleResponse(response);\r\n  }\r\n}\r\n\r\nexport const apiClient = new APIClient();\r\n\r\n// Convenience exports\r\nexport const authAPI = {\r\n  login: apiClient.login.bind(apiClient),\r\n  register: apiClient.register.bind(apiClient),\r\n  getCurrentUser: apiClient.getCurrentUser.bind(apiClient),\r\n  getGoogleAuthUrl: apiClient.getGoogleAuthUrl.bind(apiClient),\r\n  getGitHubAuthUrl: apiClient.getGitHubAuthUrl.bind(apiClient),\r\n};\r\n\r\nexport const typingAPI = {\r\n  submitTest: apiClient.submitTypingTest.bind(apiClient),\r\n  getUserTests: apiClient.getUserTests.bind(apiClient),\r\n  getLeaderboard: apiClient.getLeaderboard.bind(apiClient),\r\n  getWords: apiClient.getWords.bind(apiClient),\r\n};\r\n\r\nexport const userAPI = {\r\n  updateProfile: apiClient.updateProfile.bind(apiClient),\r\n  getUserStats: apiClient.getUserStats.bind(apiClient),\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}