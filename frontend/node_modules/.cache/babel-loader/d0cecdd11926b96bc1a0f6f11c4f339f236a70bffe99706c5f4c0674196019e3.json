{"ast":null,"code":"import axios from'axios';import{Language}from'../types';import{mockAuthAPI,mockTypingAPI,mockUserAPI}from'./mockApi';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8081/api';const USE_MOCK_API=process.env.REACT_APP_USE_MOCK_API==='true';class APIClient{constructor(){this.client=void 0;this.client=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Add auth token to requests\nthis.client.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;});// Handle auth errors\nthis.client.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){localStorage.removeItem('token');window.location.href='/login';}return Promise.reject(error);});}async handleResponse(response){if(response.data.success&&response.data.data){return response.data.data;}throw new Error(response.data.error||response.data.message||'API request failed');}// Check if backend is available\nasync isBackendAvailable(){if(USE_MOCK_API)return false;try{await this.client.get('/health',{timeout:2000});return true;}catch{return false;}}// Auth endpoints\nasync login(credentials){if(!(await this.isBackendAvailable())){return mockAuthAPI.login(credentials);}const response=await this.client.post('/auth/login',credentials);return this.handleResponse(response);}async register(userData){if(!(await this.isBackendAvailable())){return mockAuthAPI.register(userData);}const response=await this.client.post('/auth/register',userData);return this.handleResponse(response);}async getCurrentUser(){if(!(await this.isBackendAvailable())){return mockAuthAPI.getCurrentUser();}const response=await this.client.get('/auth/me');return this.handleResponse(response);}// OAuth endpoints\ngetGoogleAuthUrl(){if(USE_MOCK_API)return mockAuthAPI.getGoogleAuthUrl();return`${API_BASE_URL}/auth/oauth2/google`;}getGitHubAuthUrl(){if(USE_MOCK_API)return mockAuthAPI.getGitHubAuthUrl();return`${API_BASE_URL}/auth/oauth2/github`;}// Typing test endpoints\nasync submitTypingTest(result){if(!(await this.isBackendAvailable())){return mockTypingAPI.submitTest(result);}const response=await this.client.post('/tests/submit',result);return this.handleResponse(response);}async getUserTests(limit){if(!(await this.isBackendAvailable())){return mockTypingAPI.getUserTests(limit);}const response=await this.client.get(`/tests/user${limit?`?limit=${limit}`:''}`);return this.handleResponse(response);}async getLeaderboard(mode){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;if(!(await this.isBackendAvailable())){return mockTypingAPI.getLeaderboard(mode,limit);}const response=await this.client.get(`/tests/leaderboard?mode=${mode}&limit=${limit}`);return this.handleResponse(response);}// Words endpoints\nasync getWords(){let language=arguments.length>0&&arguments[0]!==undefined?arguments[0]:Language.ENGLISH;let count=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;if(!(await this.isBackendAvailable())){return mockTypingAPI.getWords(language,count);}const response=await this.client.get(`/words?language=${language}&count=${count}`);return this.handleResponse(response);}// User profile endpoints\nasync updateProfile(userData){if(!(await this.isBackendAvailable())){return mockUserAPI.updateProfile(userData);}const response=await this.client.put('/users/profile',userData);return this.handleResponse(response);}async getUserStats(){if(!(await this.isBackendAvailable())){return mockUserAPI.getUserStats();}const response=await this.client.get('/users/stats');return this.handleResponse(response);}}export const apiClient=new APIClient();// Convenience exports\nexport const authAPI={login:apiClient.login.bind(apiClient),register:apiClient.register.bind(apiClient),getCurrentUser:apiClient.getCurrentUser.bind(apiClient),getGoogleAuthUrl:apiClient.getGoogleAuthUrl.bind(apiClient),getGitHubAuthUrl:apiClient.getGitHubAuthUrl.bind(apiClient)};export const typingAPI={submitTest:apiClient.submitTypingTest.bind(apiClient),getUserTests:apiClient.getUserTests.bind(apiClient),getLeaderboard:apiClient.getLeaderboard.bind(apiClient),getWords:apiClient.getWords.bind(apiClient)};export const userAPI={updateProfile:apiClient.updateProfile.bind(apiClient),getUserStats:apiClient.getUserStats.bind(apiClient)};","map":{"version":3,"names":["axios","Language","mockAuthAPI","mockTypingAPI","mockUserAPI","API_BASE_URL","process","env","REACT_APP_API_URL","USE_MOCK_API","REACT_APP_USE_MOCK_API","APIClient","constructor","client","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","handleResponse","data","success","Error","message","isBackendAvailable","get","timeout","login","credentials","post","register","userData","getCurrentUser","getGoogleAuthUrl","getGitHubAuthUrl","submitTypingTest","result","submitTest","getUserTests","limit","getLeaderboard","mode","arguments","length","undefined","getWords","language","ENGLISH","count","updateProfile","put","getUserStats","apiClient","authAPI","bind","typingAPI","userAPI"],"sources":["C:/GitHub/TurboKeys/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\r\nimport { \r\n  User, \r\n  AuthUser, \r\n  LoginRequest, \r\n  RegisterRequest, \r\n  TypingTestResult, \r\n  LeaderboardEntry, \r\n  WordListResponse,\r\n  TestMode,\r\n  Language,\r\n  ApiResponse \r\n} from '../types';\r\nimport { mockAuthAPI, mockTypingAPI, mockUserAPI } from './mockApi';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8081/api';\r\nconst USE_MOCK_API = process.env.REACT_APP_USE_MOCK_API === 'true';\r\n\r\nclass APIClient {\r\n  private client: AxiosInstance;\r\n\r\n  constructor() {\r\n    this.client = axios.create({\r\n      baseURL: API_BASE_URL,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Add auth token to requests\r\n    this.client.interceptors.request.use((config) => {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n      }\r\n      return config;\r\n    });\r\n\r\n    // Handle auth errors\r\n    this.client.interceptors.response.use(\r\n      (response) => response,\r\n      (error) => {\r\n        if (error.response?.status === 401) {\r\n          localStorage.removeItem('token');\r\n          window.location.href = '/login';\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  private async handleResponse<T>(response: AxiosResponse<ApiResponse<T>>): Promise<T> {\r\n    if (response.data.success && response.data.data) {\r\n      return response.data.data;\r\n    }\r\n    throw new Error(response.data.error || response.data.message || 'API request failed');\r\n  }\r\n\r\n  // Check if backend is available\r\n  private async isBackendAvailable(): Promise<boolean> {\r\n    if (USE_MOCK_API) return false;\r\n    \r\n    try {\r\n      await this.client.get('/health', { timeout: 2000 });\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Auth endpoints\r\n  async login(credentials: LoginRequest): Promise<AuthUser> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockAuthAPI.login(credentials);\r\n    }\r\n    \r\n    const response = await this.client.post<ApiResponse<AuthUser>>('/auth/login', credentials);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async register(userData: RegisterRequest): Promise<AuthUser> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockAuthAPI.register(userData);\r\n    }\r\n    \r\n    const response = await this.client.post<ApiResponse<AuthUser>>('/auth/register', userData);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getCurrentUser(): Promise<User> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockAuthAPI.getCurrentUser();\r\n    }\r\n    \r\n    const response = await this.client.get<ApiResponse<User>>('/auth/me');\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  // OAuth endpoints\r\n  getGoogleAuthUrl(): string {\r\n    if (USE_MOCK_API) return mockAuthAPI.getGoogleAuthUrl();\r\n    return `${API_BASE_URL}/auth/oauth2/google`;\r\n  }\r\n\r\n  getGitHubAuthUrl(): string {\r\n    if (USE_MOCK_API) return mockAuthAPI.getGitHubAuthUrl();\r\n    return `${API_BASE_URL}/auth/oauth2/github`;\r\n  }\r\n\r\n  // Typing test endpoints\r\n  async submitTypingTest(result: Omit<TypingTestResult, 'id' | 'userId' | 'completedAt'>): Promise<TypingTestResult> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockTypingAPI.submitTest(result);\r\n    }\r\n    \r\n    const response = await this.client.post<ApiResponse<TypingTestResult>>('/tests/submit', result);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getUserTests(limit?: number): Promise<TypingTestResult[]> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockTypingAPI.getUserTests(limit);\r\n    }\r\n    \r\n    const response = await this.client.get<ApiResponse<TypingTestResult[]>>(`/tests/user${limit ? `?limit=${limit}` : ''}`);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getLeaderboard(mode: TestMode, limit: number = 10): Promise<LeaderboardEntry[]> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockTypingAPI.getLeaderboard(mode, limit);\r\n    }\r\n    \r\n    const response = await this.client.get<ApiResponse<LeaderboardEntry[]>>(`/tests/leaderboard?mode=${mode}&limit=${limit}`);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  // Words endpoints\r\n  async getWords(language: Language = Language.ENGLISH, count: number = 50): Promise<WordListResponse> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockTypingAPI.getWords(language, count);\r\n    }\r\n    \r\n    const response = await this.client.get<ApiResponse<WordListResponse>>(`/words?language=${language}&count=${count}`);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  // User profile endpoints\r\n  async updateProfile(userData: Partial<User>): Promise<User> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockUserAPI.updateProfile(userData);\r\n    }\r\n    \r\n    const response = await this.client.put<ApiResponse<User>>('/users/profile', userData);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getUserStats(): Promise<any> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockUserAPI.getUserStats();\r\n    }\r\n    \r\n    const response = await this.client.get<ApiResponse<any>>('/users/stats');\r\n    return this.handleResponse(response);\r\n  }\r\n}\r\n\r\nexport const apiClient = new APIClient();\r\n\r\n// Convenience exports\r\nexport const authAPI = {\r\n  login: apiClient.login.bind(apiClient),\r\n  register: apiClient.register.bind(apiClient),\r\n  getCurrentUser: apiClient.getCurrentUser.bind(apiClient),\r\n  getGoogleAuthUrl: apiClient.getGoogleAuthUrl.bind(apiClient),\r\n  getGitHubAuthUrl: apiClient.getGitHubAuthUrl.bind(apiClient),\r\n};\r\n\r\nexport const typingAPI = {\r\n  submitTest: apiClient.submitTypingTest.bind(apiClient),\r\n  getUserTests: apiClient.getUserTests.bind(apiClient),\r\n  getLeaderboard: apiClient.getLeaderboard.bind(apiClient),\r\n  getWords: apiClient.getWords.bind(apiClient),\r\n};\r\n\r\nexport const userAPI = {\r\n  updateProfile: apiClient.updateProfile.bind(apiClient),\r\n  getUserStats: apiClient.getUserStats.bind(apiClient),\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}