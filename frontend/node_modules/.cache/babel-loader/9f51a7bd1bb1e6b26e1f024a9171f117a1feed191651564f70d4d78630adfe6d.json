{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\TurboKeys\\\\frontend\\\\src\\\\components\\\\TypingTest\\\\TypingTest.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { typingAPI } from '../../services/api';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TypingTest = ({\n  mode,\n  language,\n  onTestComplete\n}) => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const [words, setWords] = useState([]);\n  const [currentText, setCurrentText] = useState('');\n  const [typedText, setTypedText] = useState('');\n  const [currentCharIndex, setCurrentCharIndex] = useState(0);\n  const [characters, setCharacters] = useState([]);\n  const [startTime, setStartTime] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(parseInt(mode.replace('s', '')));\n  const [isActive, setIsActive] = useState(false);\n  const [isCompleted, setIsCompleted] = useState(false);\n  const [isFocused, setIsFocused] = useState(true);\n  const [stats, setStats] = useState({\n    wpm: 0,\n    accuracy: 0,\n    charactersTyped: 0,\n    errorsCount: 0,\n    correctCharacters: 0,\n    timeElapsed: 0\n  });\n  const textDisplayRef = useRef(null);\n  const containerRef = useRef(null);\n\n  // Load words when component mounts\n  useEffect(() => {\n    const loadWords = async () => {\n      try {\n        const response = await typingAPI.getWords(language, 200);\n        setWords(response.words);\n        generateText(response.words);\n      } catch (error) {\n        console.error('Failed to load words:', error);\n        // Fallback words\n        const fallbackWords = ['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog', 'pack', 'my', 'box', 'with', 'five', 'dozen', 'liquor', 'jugs', 'time', 'part', 'then', 'and', 'what', 'course', 'stand', 'to', 'home', 'around', 'over', 'might', 'move', 'to', 'just', 'these', 'must', 'look', 'move', 'could', 'go', 'begin', 'people', 'what', 'tell', 'year', 'high', 'there', 'eye', 'world', 'way', 'only', 'work', 'word', 'can', 'point', 'down', 'form', 'thing', 'govern', 'life', 'any', 'few', 'place', 'set'];\n        setWords(fallbackWords);\n        generateText(fallbackWords);\n      }\n    };\n    loadWords();\n  }, [language]);\n\n  // Generate random text from words\n  const generateText = wordList => {\n    const shuffled = [...wordList].sort(() => 0.5 - Math.random());\n    const text = shuffled.slice(0, 50).join(' ');\n    setCurrentText(text);\n    setCharacters(text.split('').map((char, index) => ({\n      char,\n      status: index === 0 ? 'current' : 'untyped',\n      index\n    })));\n  };\n\n  // Timer effect\n  useEffect(() => {\n    let interval;\n    if (isActive && timeLeft > 0 && !isCompleted) {\n      interval = setInterval(() => {\n        setTimeLeft(time => {\n          if (time <= 1) {\n            completeTest();\n            return 0;\n          }\n          return time - 1;\n        });\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [isActive, timeLeft, isCompleted]);\n\n  // Focus management\n  useEffect(() => {\n    const handleFocus = () => setIsFocused(true);\n    const handleBlur = () => setIsFocused(false);\n    if (containerRef.current) {\n      containerRef.current.addEventListener('focus', handleFocus);\n      containerRef.current.addEventListener('blur', handleBlur);\n      containerRef.current.focus();\n    }\n    return () => {\n      if (containerRef.current) {\n        containerRef.current.removeEventListener('focus', handleFocus);\n        containerRef.current.removeEventListener('blur', handleBlur);\n      }\n    };\n  }, []);\n\n  // Keyboard event handler\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (isCompleted || !isFocused) return;\n\n      // Prevent default behavior for most keys\n      if (event.key !== 'F5' && event.key !== 'F12' && !event.ctrlKey) {\n        event.preventDefault();\n      }\n\n      // Start test on first keystroke\n      if (!isActive && !isCompleted && event.key.length === 1) {\n        startTest();\n      }\n      if (event.key === 'Backspace') {\n        handleBackspace();\n      } else if (event.key.length === 1) {\n        handleCharacterInput(event.key);\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isActive, isCompleted, isFocused, typedText, currentCharIndex]);\n  const startTest = () => {\n    if (!isActive && !isCompleted) {\n      setIsActive(true);\n      setStartTime(Date.now());\n    }\n  };\n  const handleCharacterInput = char => {\n    if (isCompleted || currentCharIndex >= currentText.length) return;\n    const newTypedText = typedText + char;\n    setTypedText(newTypedText);\n    const newCharacters = [...characters];\n    const currentChar = currentText[currentCharIndex];\n\n    // Mark current character as correct or incorrect\n    newCharacters[currentCharIndex].status = char === currentChar ? 'correct' : 'incorrect';\n\n    // Move to next character\n    const nextIndex = currentCharIndex + 1;\n    setCurrentCharIndex(nextIndex);\n\n    // Set next character as current\n    if (nextIndex < currentText.length) {\n      newCharacters[nextIndex].status = 'current';\n    }\n    setCharacters(newCharacters);\n\n    // Complete test if all text is typed\n    if (nextIndex >= currentText.length) {\n      completeTest();\n    }\n  };\n  const handleBackspace = () => {\n    if (currentCharIndex === 0) return;\n    const newTypedText = typedText.slice(0, -1);\n    setTypedText(newTypedText);\n    const newCharacters = [...characters];\n\n    // Reset current character to untyped\n    newCharacters[currentCharIndex].status = 'untyped';\n\n    // Move back one character\n    const prevIndex = currentCharIndex - 1;\n    setCurrentCharIndex(prevIndex);\n\n    // Set previous character as current\n    newCharacters[prevIndex].status = 'current';\n    setCharacters(newCharacters);\n  };\n  const calculateStats = useCallback(() => {\n    const timeElapsed = startTime ? (Date.now() - startTime) / 1000 : 0;\n    const correctCharacters = characters.filter(char => char.status === 'correct').length;\n    const incorrectCharacters = characters.filter(char => char.status === 'incorrect').length;\n    const totalTyped = correctCharacters + incorrectCharacters;\n    const wpm = timeElapsed > 0 ? Math.round(correctCharacters / 5 / (timeElapsed / 60)) : 0;\n    const accuracy = totalTyped > 0 ? Math.round(correctCharacters / totalTyped * 100) : 100;\n    return {\n      wpm,\n      accuracy,\n      charactersTyped: totalTyped,\n      errorsCount: incorrectCharacters,\n      correctCharacters,\n      timeElapsed: Math.round(timeElapsed)\n    };\n  }, [characters, startTime]);\n  const completeTest = useCallback(() => {\n    setIsActive(false);\n    setIsCompleted(true);\n    const finalStats = calculateStats();\n    setStats(finalStats);\n    onTestComplete(finalStats);\n  }, [calculateStats, onTestComplete]);\n  const handleInputChange = event => {\n    const value = event.target.value;\n    if (!isActive && !isCompleted) {\n      startTest();\n    }\n    if (isCompleted) return;\n    setTypedText(value);\n    setCurrentCharIndex(value.length);\n\n    // Update character statuses\n    const newCharacters = [...characters];\n    for (let i = 0; i < currentText.length; i++) {\n      if (i < value.length) {\n        newCharacters[i].status = value[i] === currentText[i] ? 'correct' : 'incorrect';\n      } else if (i === value.length) {\n        newCharacters[i].status = 'current';\n      } else {\n        newCharacters[i].status = 'untyped';\n      }\n    }\n    setCharacters(newCharacters);\n\n    // Complete test if all text is typed\n    if (value.length >= currentText.length) {\n      completeTest();\n    }\n  };\n  const resetTest = () => {\n    setTypedText('');\n    setCurrentCharIndex(0);\n    setStartTime(null);\n    setTimeLeft(parseInt(mode.replace('s', '')));\n    setIsActive(false);\n    setIsCompleted(false);\n    setStats({\n      wpm: 0,\n      accuracy: 0,\n      charactersTyped: 0,\n      errorsCount: 0,\n      correctCharacters: 0,\n      timeElapsed: 0\n    });\n    generateText(words);\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  // Update stats in real-time\n  useEffect(() => {\n    if (isActive && !isCompleted) {\n      const currentStats = calculateStats();\n      setStats(currentStats);\n    }\n  }, [characters, isActive, isCompleted, calculateStats]);\n  const getCharacterClassName = char => {\n    switch (char.status) {\n      case 'correct':\n        return 'char-correct';\n      case 'incorrect':\n        return 'char-incorrect';\n      case 'current':\n        return 'char-current';\n      default:\n        return 'char-untyped';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full max-w-4xl mx-auto p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between items-center mb-6 p-4 card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-2xl font-bold text-primary-600\",\n            children: stats.wpm\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-gray-600 dark:text-gray-400\",\n            children: \"WPM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-2xl font-bold text-green-600\",\n            children: [stats.accuracy, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-gray-600 dark:text-gray-400\",\n            children: \"Accuracy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-2xl font-bold text-blue-600\",\n            children: stats.errorsCount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-gray-600 dark:text-gray-400\",\n            children: \"Errors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-3xl font-bold text-orange-600\",\n          children: timeLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm text-gray-600 dark:text-gray-400\",\n          children: \"Seconds\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: textDisplayRef,\n      className: \"mb-6 p-6 card typing-text min-h-[200px] leading-loose cursor-text\",\n      onClick: () => {\n        var _inputRef$current;\n        return (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n      },\n      children: characters.map((char, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: `${getCharacterClassName(char)} ${char.char === ' ' ? 'mr-1' : ''}`,\n        children: char.char === ' ' ? '\\u00A0' : char.char\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: inputRef,\n        type: \"text\",\n        value: typedText,\n        onChange: handleInputChange,\n        disabled: isCompleted,\n        className: \"input-field font-mono text-lg\",\n        placeholder: isCompleted ? \"Test completed!\" : \"Start typing to begin...\",\n        autoComplete: \"off\",\n        autoCorrect: \"off\",\n        autoCapitalize: \"off\",\n        spellCheck: \"false\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center space-x-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetTest,\n        className: \"btn-secondary\",\n        children: \"Reset Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this), isCompleted && user && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          // Save test result to backend\n          typingAPI.submitTest({\n            wpm: stats.wpm,\n            accuracy: stats.accuracy,\n            charactersTyped: stats.charactersTyped,\n            errorsCount: stats.errorsCount,\n            duration: parseInt(mode.replace('s', '')),\n            mode,\n            language,\n            text: currentText\n          });\n        },\n        className: \"btn-primary\",\n        children: \"Save Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this), isCompleted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 p-4 card text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl font-bold mb-2\",\n        children: \"Test Completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600 dark:text-gray-400\",\n        children: [\"You typed at \", stats.wpm, \" WPM with \", stats.accuracy, \"% accuracy\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 5\n  }, this);\n};\n_s(TypingTest, \"xWhuBBTdv2gMshvF95DJzs0W1l0=\", false, function () {\n  return [useAuth];\n});\n_c = TypingTest;\nexport default TypingTest;\nvar _c;\n$RefreshReg$(_c, \"TypingTest\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","typingAPI","useAuth","jsxDEV","_jsxDEV","TypingTest","mode","language","onTestComplete","_s","user","words","setWords","currentText","setCurrentText","typedText","setTypedText","currentCharIndex","setCurrentCharIndex","characters","setCharacters","startTime","setStartTime","timeLeft","setTimeLeft","parseInt","replace","isActive","setIsActive","isCompleted","setIsCompleted","isFocused","setIsFocused","stats","setStats","wpm","accuracy","charactersTyped","errorsCount","correctCharacters","timeElapsed","textDisplayRef","containerRef","loadWords","response","getWords","generateText","error","console","fallbackWords","wordList","shuffled","sort","Math","random","text","slice","join","split","map","char","index","status","interval","setInterval","time","completeTest","clearInterval","handleFocus","handleBlur","current","addEventListener","focus","removeEventListener","handleKeyDown","event","key","ctrlKey","preventDefault","length","startTest","handleBackspace","handleCharacterInput","document","Date","now","newTypedText","newCharacters","currentChar","nextIndex","prevIndex","calculateStats","filter","incorrectCharacters","totalTyped","round","finalStats","handleInputChange","value","target","i","resetTest","inputRef","currentStats","getCharacterClassName","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","_inputRef$current","type","onChange","disabled","placeholder","autoComplete","autoCorrect","autoCapitalize","spellCheck","submitTest","duration","_c","$RefreshReg$"],"sources":["C:/GitHub/TurboKeys/frontend/src/components/TypingTest/TypingTest.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { TestMode, Language, TypingStats, TypingCharacter } from '../../types';\r\nimport { typingAPI } from '../../services/api';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\n\r\ninterface TypingTestProps {\r\n  mode: TestMode;\r\n  language: Language;\r\n  onTestComplete: (stats: TypingStats) => void;\r\n}\r\n\r\nconst TypingTest: React.FC<TypingTestProps> = ({ mode, language, onTestComplete }) => {\r\n  const { user } = useAuth();\r\n  const [words, setWords] = useState<string[]>([]);\r\n  const [currentText, setCurrentText] = useState<string>('');\r\n  const [typedText, setTypedText] = useState<string>('');\r\n  const [currentCharIndex, setCurrentCharIndex] = useState<number>(0);\r\n  const [characters, setCharacters] = useState<TypingCharacter[]>([]);\r\n  const [startTime, setStartTime] = useState<number | null>(null);\r\n  const [timeLeft, setTimeLeft] = useState<number>(parseInt(mode.replace('s', '')));\r\n  const [isActive, setIsActive] = useState<boolean>(false);\r\n  const [isCompleted, setIsCompleted] = useState<boolean>(false);\r\n  const [isFocused, setIsFocused] = useState<boolean>(true);\r\n  const [stats, setStats] = useState<TypingStats>({\r\n    wpm: 0,\r\n    accuracy: 0,\r\n    charactersTyped: 0,\r\n    errorsCount: 0,\r\n    correctCharacters: 0,\r\n    timeElapsed: 0,\r\n  });\r\n\r\n  const textDisplayRef = useRef<HTMLDivElement>(null);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Load words when component mounts\r\n  useEffect(() => {\r\n    const loadWords = async () => {\r\n      try {\r\n        const response = await typingAPI.getWords(language, 200);\r\n        setWords(response.words);\r\n        generateText(response.words);\r\n      } catch (error) {\r\n        console.error('Failed to load words:', error);\r\n        // Fallback words\r\n        const fallbackWords = [\r\n          'the', 'quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog',\r\n          'pack', 'my', 'box', 'with', 'five', 'dozen', 'liquor', 'jugs',\r\n          'time', 'part', 'then', 'and', 'what', 'course', 'stand', 'to',\r\n          'home', 'around', 'over', 'might', 'move', 'to', 'just', 'these',\r\n          'must', 'look', 'move', 'could', 'go', 'begin', 'people', 'what',\r\n          'tell', 'year', 'high', 'there', 'eye', 'world', 'way', 'only',\r\n          'work', 'word', 'can', 'point', 'down', 'form', 'thing', 'govern',\r\n          'life', 'any', 'few', 'place', 'set'\r\n        ];\r\n        setWords(fallbackWords);\r\n        generateText(fallbackWords);\r\n      }\r\n    };\r\n\r\n    loadWords();\r\n  }, [language]);\r\n\r\n  // Generate random text from words\r\n  const generateText = (wordList: string[]) => {\r\n    const shuffled = [...wordList].sort(() => 0.5 - Math.random());\r\n    const text = shuffled.slice(0, 50).join(' ');\r\n    setCurrentText(text);\r\n    setCharacters(text.split('').map((char, index) => ({\r\n      char,\r\n      status: index === 0 ? 'current' : 'untyped',\r\n      index,\r\n    })));\r\n  };\r\n\r\n  // Timer effect\r\n  useEffect(() => {\r\n    let interval: NodeJS.Timeout;\r\n\r\n    if (isActive && timeLeft > 0 && !isCompleted) {\r\n      interval = setInterval(() => {\r\n        setTimeLeft((time) => {\r\n          if (time <= 1) {\r\n            completeTest();\r\n            return 0;\r\n          }\r\n          return time - 1;\r\n        });\r\n      }, 1000);\r\n    }\r\n\r\n    return () => clearInterval(interval);\r\n  }, [isActive, timeLeft, isCompleted]);\r\n\r\n  // Focus management\r\n  useEffect(() => {\r\n    const handleFocus = () => setIsFocused(true);\r\n    const handleBlur = () => setIsFocused(false);\r\n    \r\n    if (containerRef.current) {\r\n      containerRef.current.addEventListener('focus', handleFocus);\r\n      containerRef.current.addEventListener('blur', handleBlur);\r\n      containerRef.current.focus();\r\n    }\r\n\r\n    return () => {\r\n      if (containerRef.current) {\r\n        containerRef.current.removeEventListener('focus', handleFocus);\r\n        containerRef.current.removeEventListener('blur', handleBlur);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Keyboard event handler\r\n  useEffect(() => {\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      if (isCompleted || !isFocused) return;\r\n\r\n      // Prevent default behavior for most keys\r\n      if (event.key !== 'F5' && event.key !== 'F12' && !event.ctrlKey) {\r\n        event.preventDefault();\r\n      }\r\n\r\n      // Start test on first keystroke\r\n      if (!isActive && !isCompleted && event.key.length === 1) {\r\n        startTest();\r\n      }\r\n\r\n      if (event.key === 'Backspace') {\r\n        handleBackspace();\r\n      } else if (event.key.length === 1) {\r\n        handleCharacterInput(event.key);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n    return () => document.removeEventListener('keydown', handleKeyDown);\r\n  }, [isActive, isCompleted, isFocused, typedText, currentCharIndex]);\r\n\r\n  const startTest = () => {\r\n    if (!isActive && !isCompleted) {\r\n      setIsActive(true);\r\n      setStartTime(Date.now());\r\n    }\r\n  };\r\n\r\n  const handleCharacterInput = (char: string) => {\r\n    if (isCompleted || currentCharIndex >= currentText.length) return;\r\n\r\n    const newTypedText = typedText + char;\r\n    setTypedText(newTypedText);\r\n\r\n    const newCharacters = [...characters];\r\n    const currentChar = currentText[currentCharIndex];\r\n    \r\n    // Mark current character as correct or incorrect\r\n    newCharacters[currentCharIndex].status = char === currentChar ? 'correct' : 'incorrect';\r\n    \r\n    // Move to next character\r\n    const nextIndex = currentCharIndex + 1;\r\n    setCurrentCharIndex(nextIndex);\r\n    \r\n    // Set next character as current\r\n    if (nextIndex < currentText.length) {\r\n      newCharacters[nextIndex].status = 'current';\r\n    }\r\n\r\n    setCharacters(newCharacters);\r\n\r\n    // Complete test if all text is typed\r\n    if (nextIndex >= currentText.length) {\r\n      completeTest();\r\n    }\r\n  };\r\n\r\n  const handleBackspace = () => {\r\n    if (currentCharIndex === 0) return;\r\n\r\n    const newTypedText = typedText.slice(0, -1);\r\n    setTypedText(newTypedText);\r\n\r\n    const newCharacters = [...characters];\r\n    \r\n    // Reset current character to untyped\r\n    newCharacters[currentCharIndex].status = 'untyped';\r\n    \r\n    // Move back one character\r\n    const prevIndex = currentCharIndex - 1;\r\n    setCurrentCharIndex(prevIndex);\r\n    \r\n    // Set previous character as current\r\n    newCharacters[prevIndex].status = 'current';\r\n\r\n    setCharacters(newCharacters);\r\n  };\r\n\r\n  const calculateStats = useCallback((): TypingStats => {\r\n    const timeElapsed = startTime ? (Date.now() - startTime) / 1000 : 0;\r\n    const correctCharacters = characters.filter(char => char.status === 'correct').length;\r\n    const incorrectCharacters = characters.filter(char => char.status === 'incorrect').length;\r\n    const totalTyped = correctCharacters + incorrectCharacters;\r\n    \r\n    const wpm = timeElapsed > 0 ? Math.round((correctCharacters / 5) / (timeElapsed / 60)) : 0;\r\n    const accuracy = totalTyped > 0 ? Math.round((correctCharacters / totalTyped) * 100) : 100;\r\n\r\n    return {\r\n      wpm,\r\n      accuracy,\r\n      charactersTyped: totalTyped,\r\n      errorsCount: incorrectCharacters,\r\n      correctCharacters,\r\n      timeElapsed: Math.round(timeElapsed),\r\n    };\r\n  }, [characters, startTime]);\r\n\r\n  const completeTest = useCallback(() => {\r\n    setIsActive(false);\r\n    setIsCompleted(true);\r\n    const finalStats = calculateStats();\r\n    setStats(finalStats);\r\n    onTestComplete(finalStats);\r\n  }, [calculateStats, onTestComplete]);\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = event.target.value;\r\n    \r\n    if (!isActive && !isCompleted) {\r\n      startTest();\r\n    }\r\n\r\n    if (isCompleted) return;\r\n\r\n    setTypedText(value);\r\n    setCurrentCharIndex(value.length);\r\n\r\n    // Update character statuses\r\n    const newCharacters = [...characters];\r\n    \r\n    for (let i = 0; i < currentText.length; i++) {\r\n      if (i < value.length) {\r\n        newCharacters[i].status = value[i] === currentText[i] ? 'correct' : 'incorrect';\r\n      } else if (i === value.length) {\r\n        newCharacters[i].status = 'current';\r\n      } else {\r\n        newCharacters[i].status = 'untyped';\r\n      }\r\n    }\r\n\r\n    setCharacters(newCharacters);\r\n\r\n    // Complete test if all text is typed\r\n    if (value.length >= currentText.length) {\r\n      completeTest();\r\n    }\r\n  };\r\n\r\n  const resetTest = () => {\r\n    setTypedText('');\r\n    setCurrentCharIndex(0);\r\n    setStartTime(null);\r\n    setTimeLeft(parseInt(mode.replace('s', '')));\r\n    setIsActive(false);\r\n    setIsCompleted(false);\r\n    setStats({\r\n      wpm: 0,\r\n      accuracy: 0,\r\n      charactersTyped: 0,\r\n      errorsCount: 0,\r\n      correctCharacters: 0,\r\n      timeElapsed: 0,\r\n    });\r\n    generateText(words);\r\n    \r\n    if (inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  };\r\n\r\n  // Update stats in real-time\r\n  useEffect(() => {\r\n    if (isActive && !isCompleted) {\r\n      const currentStats = calculateStats();\r\n      setStats(currentStats);\r\n    }\r\n  }, [characters, isActive, isCompleted, calculateStats]);\r\n\r\n  const getCharacterClassName = (char: TypingCharacter) => {\r\n    switch (char.status) {\r\n      case 'correct':\r\n        return 'char-correct';\r\n      case 'incorrect':\r\n        return 'char-incorrect';\r\n      case 'current':\r\n        return 'char-current';\r\n      default:\r\n        return 'char-untyped';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-4xl mx-auto p-6\">\r\n      {/* Stats Display */}\r\n      <div className=\"flex justify-between items-center mb-6 p-4 card\">\r\n        <div className=\"flex space-x-6\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold text-primary-600\">{stats.wpm}</div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">WPM</div>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold text-green-600\">{stats.accuracy}%</div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Accuracy</div>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold text-blue-600\">{stats.errorsCount}</div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Errors</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"text-center\">\r\n          <div className=\"text-3xl font-bold text-orange-600\">{timeLeft}</div>\r\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">Seconds</div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Text Display */}\r\n      <div \r\n        ref={textDisplayRef}\r\n        className=\"mb-6 p-6 card typing-text min-h-[200px] leading-loose cursor-text\"\r\n        onClick={() => inputRef.current?.focus()}\r\n      >\r\n        {characters.map((char, index) => (\r\n          <span\r\n            key={index}\r\n            className={`${getCharacterClassName(char)} ${char.char === ' ' ? 'mr-1' : ''}`}\r\n          >\r\n            {char.char === ' ' ? '\\u00A0' : char.char}\r\n          </span>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Input Field */}\r\n      <div className=\"mb-6\">\r\n        <input\r\n          ref={inputRef}\r\n          type=\"text\"\r\n          value={typedText}\r\n          onChange={handleInputChange}\r\n          disabled={isCompleted}\r\n          className=\"input-field font-mono text-lg\"\r\n          placeholder={isCompleted ? \"Test completed!\" : \"Start typing to begin...\"}\r\n          autoComplete=\"off\"\r\n          autoCorrect=\"off\"\r\n          autoCapitalize=\"off\"\r\n          spellCheck=\"false\"\r\n        />\r\n      </div>\r\n\r\n      {/* Controls */}\r\n      <div className=\"flex justify-center space-x-4\">\r\n        <button\r\n          onClick={resetTest}\r\n          className=\"btn-secondary\"\r\n        >\r\n          Reset Test\r\n        </button>\r\n        {isCompleted && user && (\r\n          <button\r\n            onClick={() => {\r\n              // Save test result to backend\r\n              typingAPI.submitTest({\r\n                wpm: stats.wpm,\r\n                accuracy: stats.accuracy,\r\n                charactersTyped: stats.charactersTyped,\r\n                errorsCount: stats.errorsCount,\r\n                duration: parseInt(mode.replace('s', '')),\r\n                mode,\r\n                language,\r\n                text: currentText,\r\n              });\r\n            }}\r\n            className=\"btn-primary\"\r\n          >\r\n            Save Result\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {/* Completion Message */}\r\n      {isCompleted && (\r\n        <div className=\"mt-6 p-4 card text-center\">\r\n          <h3 className=\"text-xl font-bold mb-2\">Test Completed!</h3>\r\n          <p className=\"text-gray-600 dark:text-gray-400\">\r\n            You typed at {stats.wpm} WPM with {stats.accuracy}% accuracy\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypingTest;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,EAAEC,MAAM,QAAQ,OAAO;AAEvE,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,OAAO,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQrD,MAAMC,UAAqC,GAAGA,CAAC;EAAEC,IAAI;EAAEC,QAAQ;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EACpF,MAAM;IAAEC;EAAK,CAAC,GAAGR,OAAO,CAAC,CAAC;EAC1B,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAW,EAAE,CAAC;EAChD,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAS,EAAE,CAAC;EAC1D,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAS,EAAE,CAAC;EACtD,MAAM,CAACoB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGrB,QAAQ,CAAS,CAAC,CAAC;EACnE,MAAM,CAACsB,UAAU,EAAEC,aAAa,CAAC,GAAGvB,QAAQ,CAAoB,EAAE,CAAC;EACnE,MAAM,CAACwB,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAgB,IAAI,CAAC;EAC/D,MAAM,CAAC0B,QAAQ,EAAEC,WAAW,CAAC,GAAG3B,QAAQ,CAAS4B,QAAQ,CAACnB,IAAI,CAACoB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;EACjF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAG/B,QAAQ,CAAU,KAAK,CAAC;EACxD,MAAM,CAACgC,WAAW,EAAEC,cAAc,CAAC,GAAGjC,QAAQ,CAAU,KAAK,CAAC;EAC9D,MAAM,CAACkC,SAAS,EAAEC,YAAY,CAAC,GAAGnC,QAAQ,CAAU,IAAI,CAAC;EACzD,MAAM,CAACoC,KAAK,EAAEC,QAAQ,CAAC,GAAGrC,QAAQ,CAAc;IAC9CsC,GAAG,EAAE,CAAC;IACNC,QAAQ,EAAE,CAAC;IACXC,eAAe,EAAE,CAAC;IAClBC,WAAW,EAAE,CAAC;IACdC,iBAAiB,EAAE,CAAC;IACpBC,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,MAAMC,cAAc,GAAGzC,MAAM,CAAiB,IAAI,CAAC;EACnD,MAAM0C,YAAY,GAAG1C,MAAM,CAAiB,IAAI,CAAC;;EAEjD;EACAF,SAAS,CAAC,MAAM;IACd,MAAM6C,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAM3C,SAAS,CAAC4C,QAAQ,CAACtC,QAAQ,EAAE,GAAG,CAAC;QACxDK,QAAQ,CAACgC,QAAQ,CAACjC,KAAK,CAAC;QACxBmC,YAAY,CAACF,QAAQ,CAACjC,KAAK,CAAC;MAC9B,CAAC,CAAC,OAAOoC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7C;QACA,MAAME,aAAa,GAAG,CACpB,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAC9D,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAC9D,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,EAC9D,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAChE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAChE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAC9D,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EACjE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,CACrC;QACDrC,QAAQ,CAACqC,aAAa,CAAC;QACvBH,YAAY,CAACG,aAAa,CAAC;MAC7B;IACF,CAAC;IAEDN,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACpC,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMuC,YAAY,GAAII,QAAkB,IAAK;IAC3C,MAAMC,QAAQ,GAAG,CAAC,GAAGD,QAAQ,CAAC,CAACE,IAAI,CAAC,MAAM,GAAG,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;IAC9D,MAAMC,IAAI,GAAGJ,QAAQ,CAACK,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;IAC5C3C,cAAc,CAACyC,IAAI,CAAC;IACpBnC,aAAa,CAACmC,IAAI,CAACG,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,MAAM;MACjDD,IAAI;MACJE,MAAM,EAAED,KAAK,KAAK,CAAC,GAAG,SAAS,GAAG,SAAS;MAC3CA;IACF,CAAC,CAAC,CAAC,CAAC;EACN,CAAC;;EAED;EACA/D,SAAS,CAAC,MAAM;IACd,IAAIiE,QAAwB;IAE5B,IAAIpC,QAAQ,IAAIJ,QAAQ,GAAG,CAAC,IAAI,CAACM,WAAW,EAAE;MAC5CkC,QAAQ,GAAGC,WAAW,CAAC,MAAM;QAC3BxC,WAAW,CAAEyC,IAAI,IAAK;UACpB,IAAIA,IAAI,IAAI,CAAC,EAAE;YACbC,YAAY,CAAC,CAAC;YACd,OAAO,CAAC;UACV;UACA,OAAOD,IAAI,GAAG,CAAC;QACjB,CAAC,CAAC;MACJ,CAAC,EAAE,IAAI,CAAC;IACV;IAEA,OAAO,MAAME,aAAa,CAACJ,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACpC,QAAQ,EAAEJ,QAAQ,EAAEM,WAAW,CAAC,CAAC;;EAErC;EACA/B,SAAS,CAAC,MAAM;IACd,MAAMsE,WAAW,GAAGA,CAAA,KAAMpC,YAAY,CAAC,IAAI,CAAC;IAC5C,MAAMqC,UAAU,GAAGA,CAAA,KAAMrC,YAAY,CAAC,KAAK,CAAC;IAE5C,IAAIU,YAAY,CAAC4B,OAAO,EAAE;MACxB5B,YAAY,CAAC4B,OAAO,CAACC,gBAAgB,CAAC,OAAO,EAAEH,WAAW,CAAC;MAC3D1B,YAAY,CAAC4B,OAAO,CAACC,gBAAgB,CAAC,MAAM,EAAEF,UAAU,CAAC;MACzD3B,YAAY,CAAC4B,OAAO,CAACE,KAAK,CAAC,CAAC;IAC9B;IAEA,OAAO,MAAM;MACX,IAAI9B,YAAY,CAAC4B,OAAO,EAAE;QACxB5B,YAAY,CAAC4B,OAAO,CAACG,mBAAmB,CAAC,OAAO,EAAEL,WAAW,CAAC;QAC9D1B,YAAY,CAAC4B,OAAO,CAACG,mBAAmB,CAAC,MAAM,EAAEJ,UAAU,CAAC;MAC9D;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAvE,SAAS,CAAC,MAAM;IACd,MAAM4E,aAAa,GAAIC,KAAoB,IAAK;MAC9C,IAAI9C,WAAW,IAAI,CAACE,SAAS,EAAE;;MAE/B;MACA,IAAI4C,KAAK,CAACC,GAAG,KAAK,IAAI,IAAID,KAAK,CAACC,GAAG,KAAK,KAAK,IAAI,CAACD,KAAK,CAACE,OAAO,EAAE;QAC/DF,KAAK,CAACG,cAAc,CAAC,CAAC;MACxB;;MAEA;MACA,IAAI,CAACnD,QAAQ,IAAI,CAACE,WAAW,IAAI8C,KAAK,CAACC,GAAG,CAACG,MAAM,KAAK,CAAC,EAAE;QACvDC,SAAS,CAAC,CAAC;MACb;MAEA,IAAIL,KAAK,CAACC,GAAG,KAAK,WAAW,EAAE;QAC7BK,eAAe,CAAC,CAAC;MACnB,CAAC,MAAM,IAAIN,KAAK,CAACC,GAAG,CAACG,MAAM,KAAK,CAAC,EAAE;QACjCG,oBAAoB,CAACP,KAAK,CAACC,GAAG,CAAC;MACjC;IACF,CAAC;IAEDO,QAAQ,CAACZ,gBAAgB,CAAC,SAAS,EAAEG,aAAa,CAAC;IACnD,OAAO,MAAMS,QAAQ,CAACV,mBAAmB,CAAC,SAAS,EAAEC,aAAa,CAAC;EACrE,CAAC,EAAE,CAAC/C,QAAQ,EAAEE,WAAW,EAAEE,SAAS,EAAEhB,SAAS,EAAEE,gBAAgB,CAAC,CAAC;EAEnE,MAAM+D,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAI,CAACrD,QAAQ,IAAI,CAACE,WAAW,EAAE;MAC7BD,WAAW,CAAC,IAAI,CAAC;MACjBN,YAAY,CAAC8D,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC;EAED,MAAMH,oBAAoB,GAAItB,IAAY,IAAK;IAC7C,IAAI/B,WAAW,IAAIZ,gBAAgB,IAAIJ,WAAW,CAACkE,MAAM,EAAE;IAE3D,MAAMO,YAAY,GAAGvE,SAAS,GAAG6C,IAAI;IACrC5C,YAAY,CAACsE,YAAY,CAAC;IAE1B,MAAMC,aAAa,GAAG,CAAC,GAAGpE,UAAU,CAAC;IACrC,MAAMqE,WAAW,GAAG3E,WAAW,CAACI,gBAAgB,CAAC;;IAEjD;IACAsE,aAAa,CAACtE,gBAAgB,CAAC,CAAC6C,MAAM,GAAGF,IAAI,KAAK4B,WAAW,GAAG,SAAS,GAAG,WAAW;;IAEvF;IACA,MAAMC,SAAS,GAAGxE,gBAAgB,GAAG,CAAC;IACtCC,mBAAmB,CAACuE,SAAS,CAAC;;IAE9B;IACA,IAAIA,SAAS,GAAG5E,WAAW,CAACkE,MAAM,EAAE;MAClCQ,aAAa,CAACE,SAAS,CAAC,CAAC3B,MAAM,GAAG,SAAS;IAC7C;IAEA1C,aAAa,CAACmE,aAAa,CAAC;;IAE5B;IACA,IAAIE,SAAS,IAAI5E,WAAW,CAACkE,MAAM,EAAE;MACnCb,YAAY,CAAC,CAAC;IAChB;EACF,CAAC;EAED,MAAMe,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIhE,gBAAgB,KAAK,CAAC,EAAE;IAE5B,MAAMqE,YAAY,GAAGvE,SAAS,CAACyC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3CxC,YAAY,CAACsE,YAAY,CAAC;IAE1B,MAAMC,aAAa,GAAG,CAAC,GAAGpE,UAAU,CAAC;;IAErC;IACAoE,aAAa,CAACtE,gBAAgB,CAAC,CAAC6C,MAAM,GAAG,SAAS;;IAElD;IACA,MAAM4B,SAAS,GAAGzE,gBAAgB,GAAG,CAAC;IACtCC,mBAAmB,CAACwE,SAAS,CAAC;;IAE9B;IACAH,aAAa,CAACG,SAAS,CAAC,CAAC5B,MAAM,GAAG,SAAS;IAE3C1C,aAAa,CAACmE,aAAa,CAAC;EAC9B,CAAC;EAED,MAAMI,cAAc,GAAG5F,WAAW,CAAC,MAAmB;IACpD,MAAMyC,WAAW,GAAGnB,SAAS,GAAG,CAAC+D,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGhE,SAAS,IAAI,IAAI,GAAG,CAAC;IACnE,MAAMkB,iBAAiB,GAAGpB,UAAU,CAACyE,MAAM,CAAChC,IAAI,IAAIA,IAAI,CAACE,MAAM,KAAK,SAAS,CAAC,CAACiB,MAAM;IACrF,MAAMc,mBAAmB,GAAG1E,UAAU,CAACyE,MAAM,CAAChC,IAAI,IAAIA,IAAI,CAACE,MAAM,KAAK,WAAW,CAAC,CAACiB,MAAM;IACzF,MAAMe,UAAU,GAAGvD,iBAAiB,GAAGsD,mBAAmB;IAE1D,MAAM1D,GAAG,GAAGK,WAAW,GAAG,CAAC,GAAGa,IAAI,CAAC0C,KAAK,CAAExD,iBAAiB,GAAG,CAAC,IAAKC,WAAW,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC;IAC1F,MAAMJ,QAAQ,GAAG0D,UAAU,GAAG,CAAC,GAAGzC,IAAI,CAAC0C,KAAK,CAAExD,iBAAiB,GAAGuD,UAAU,GAAI,GAAG,CAAC,GAAG,GAAG;IAE1F,OAAO;MACL3D,GAAG;MACHC,QAAQ;MACRC,eAAe,EAAEyD,UAAU;MAC3BxD,WAAW,EAAEuD,mBAAmB;MAChCtD,iBAAiB;MACjBC,WAAW,EAAEa,IAAI,CAAC0C,KAAK,CAACvD,WAAW;IACrC,CAAC;EACH,CAAC,EAAE,CAACrB,UAAU,EAAEE,SAAS,CAAC,CAAC;EAE3B,MAAM6C,YAAY,GAAGnE,WAAW,CAAC,MAAM;IACrC6B,WAAW,CAAC,KAAK,CAAC;IAClBE,cAAc,CAAC,IAAI,CAAC;IACpB,MAAMkE,UAAU,GAAGL,cAAc,CAAC,CAAC;IACnCzD,QAAQ,CAAC8D,UAAU,CAAC;IACpBxF,cAAc,CAACwF,UAAU,CAAC;EAC5B,CAAC,EAAE,CAACL,cAAc,EAAEnF,cAAc,CAAC,CAAC;EAEpC,MAAMyF,iBAAiB,GAAItB,KAA0C,IAAK;IACxE,MAAMuB,KAAK,GAAGvB,KAAK,CAACwB,MAAM,CAACD,KAAK;IAEhC,IAAI,CAACvE,QAAQ,IAAI,CAACE,WAAW,EAAE;MAC7BmD,SAAS,CAAC,CAAC;IACb;IAEA,IAAInD,WAAW,EAAE;IAEjBb,YAAY,CAACkF,KAAK,CAAC;IACnBhF,mBAAmB,CAACgF,KAAK,CAACnB,MAAM,CAAC;;IAEjC;IACA,MAAMQ,aAAa,GAAG,CAAC,GAAGpE,UAAU,CAAC;IAErC,KAAK,IAAIiF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvF,WAAW,CAACkE,MAAM,EAAEqB,CAAC,EAAE,EAAE;MAC3C,IAAIA,CAAC,GAAGF,KAAK,CAACnB,MAAM,EAAE;QACpBQ,aAAa,CAACa,CAAC,CAAC,CAACtC,MAAM,GAAGoC,KAAK,CAACE,CAAC,CAAC,KAAKvF,WAAW,CAACuF,CAAC,CAAC,GAAG,SAAS,GAAG,WAAW;MACjF,CAAC,MAAM,IAAIA,CAAC,KAAKF,KAAK,CAACnB,MAAM,EAAE;QAC7BQ,aAAa,CAACa,CAAC,CAAC,CAACtC,MAAM,GAAG,SAAS;MACrC,CAAC,MAAM;QACLyB,aAAa,CAACa,CAAC,CAAC,CAACtC,MAAM,GAAG,SAAS;MACrC;IACF;IAEA1C,aAAa,CAACmE,aAAa,CAAC;;IAE5B;IACA,IAAIW,KAAK,CAACnB,MAAM,IAAIlE,WAAW,CAACkE,MAAM,EAAE;MACtCb,YAAY,CAAC,CAAC;IAChB;EACF,CAAC;EAED,MAAMmC,SAAS,GAAGA,CAAA,KAAM;IACtBrF,YAAY,CAAC,EAAE,CAAC;IAChBE,mBAAmB,CAAC,CAAC,CAAC;IACtBI,YAAY,CAAC,IAAI,CAAC;IAClBE,WAAW,CAACC,QAAQ,CAACnB,IAAI,CAACoB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;IAC5CE,WAAW,CAAC,KAAK,CAAC;IAClBE,cAAc,CAAC,KAAK,CAAC;IACrBI,QAAQ,CAAC;MACPC,GAAG,EAAE,CAAC;MACNC,QAAQ,EAAE,CAAC;MACXC,eAAe,EAAE,CAAC;MAClBC,WAAW,EAAE,CAAC;MACdC,iBAAiB,EAAE,CAAC;MACpBC,WAAW,EAAE;IACf,CAAC,CAAC;IACFM,YAAY,CAACnC,KAAK,CAAC;IAEnB,IAAI2F,QAAQ,CAAChC,OAAO,EAAE;MACpBgC,QAAQ,CAAChC,OAAO,CAACE,KAAK,CAAC,CAAC;IAC1B;EACF,CAAC;;EAED;EACA1E,SAAS,CAAC,MAAM;IACd,IAAI6B,QAAQ,IAAI,CAACE,WAAW,EAAE;MAC5B,MAAM0E,YAAY,GAAGZ,cAAc,CAAC,CAAC;MACrCzD,QAAQ,CAACqE,YAAY,CAAC;IACxB;EACF,CAAC,EAAE,CAACpF,UAAU,EAAEQ,QAAQ,EAAEE,WAAW,EAAE8D,cAAc,CAAC,CAAC;EAEvD,MAAMa,qBAAqB,GAAI5C,IAAqB,IAAK;IACvD,QAAQA,IAAI,CAACE,MAAM;MACjB,KAAK,SAAS;QACZ,OAAO,cAAc;MACvB,KAAK,WAAW;QACd,OAAO,gBAAgB;MACzB,KAAK,SAAS;QACZ,OAAO,cAAc;MACvB;QACE,OAAO,cAAc;IACzB;EACF,CAAC;EAED,oBACE1D,OAAA;IAAKqG,SAAS,EAAC,8BAA8B;IAAAC,QAAA,gBAE3CtG,OAAA;MAAKqG,SAAS,EAAC,iDAAiD;MAAAC,QAAA,gBAC9DtG,OAAA;QAAKqG,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC7BtG,OAAA;UAAKqG,SAAS,EAAC,aAAa;UAAAC,QAAA,gBAC1BtG,OAAA;YAAKqG,SAAS,EAAC,qCAAqC;YAAAC,QAAA,EAAEzE,KAAK,CAACE;UAAG;YAAAwE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACtE1G,OAAA;YAAKqG,SAAS,EAAC,0CAA0C;YAAAC,QAAA,EAAC;UAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChE,CAAC,eACN1G,OAAA;UAAKqG,SAAS,EAAC,aAAa;UAAAC,QAAA,gBAC1BtG,OAAA;YAAKqG,SAAS,EAAC,mCAAmC;YAAAC,QAAA,GAAEzE,KAAK,CAACG,QAAQ,EAAC,GAAC;UAAA;YAAAuE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC1E1G,OAAA;YAAKqG,SAAS,EAAC,0CAA0C;YAAAC,QAAA,EAAC;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrE,CAAC,eACN1G,OAAA;UAAKqG,SAAS,EAAC,aAAa;UAAAC,QAAA,gBAC1BtG,OAAA;YAAKqG,SAAS,EAAC,kCAAkC;YAAAC,QAAA,EAAEzE,KAAK,CAACK;UAAW;YAAAqE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eAC3E1G,OAAA;YAAKqG,SAAS,EAAC,0CAA0C;YAAAC,QAAA,EAAC;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACN1G,OAAA;QAAKqG,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1BtG,OAAA;UAAKqG,SAAS,EAAC,oCAAoC;UAAAC,QAAA,EAAEnF;QAAQ;UAAAoF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACpE1G,OAAA;UAAKqG,SAAS,EAAC,0CAA0C;UAAAC,QAAA,EAAC;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAGN1G,OAAA;MACE2G,GAAG,EAAEtE,cAAe;MACpBgE,SAAS,EAAC,mEAAmE;MAC7EO,OAAO,EAAEA,CAAA;QAAA,IAAAC,iBAAA;QAAA,QAAAA,iBAAA,GAAMX,QAAQ,CAAChC,OAAO,cAAA2C,iBAAA,uBAAhBA,iBAAA,CAAkBzC,KAAK,CAAC,CAAC;MAAA,CAAC;MAAAkC,QAAA,EAExCvF,UAAU,CAACwC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC1BzD,OAAA;QAEEqG,SAAS,EAAE,GAAGD,qBAAqB,CAAC5C,IAAI,CAAC,IAAIA,IAAI,CAACA,IAAI,KAAK,GAAG,GAAG,MAAM,GAAG,EAAE,EAAG;QAAA8C,QAAA,EAE9E9C,IAAI,CAACA,IAAI,KAAK,GAAG,GAAG,QAAQ,GAAGA,IAAI,CAACA;MAAI,GAHpCC,KAAK;QAAA8C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIN,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAGN1G,OAAA;MAAKqG,SAAS,EAAC,MAAM;MAAAC,QAAA,eACnBtG,OAAA;QACE2G,GAAG,EAAET,QAAS;QACdY,IAAI,EAAC,MAAM;QACXhB,KAAK,EAAEnF,SAAU;QACjBoG,QAAQ,EAAElB,iBAAkB;QAC5BmB,QAAQ,EAAEvF,WAAY;QACtB4E,SAAS,EAAC,+BAA+B;QACzCY,WAAW,EAAExF,WAAW,GAAG,iBAAiB,GAAG,0BAA2B;QAC1EyF,YAAY,EAAC,KAAK;QAClBC,WAAW,EAAC,KAAK;QACjBC,cAAc,EAAC,KAAK;QACpBC,UAAU,EAAC;MAAO;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAGN1G,OAAA;MAAKqG,SAAS,EAAC,+BAA+B;MAAAC,QAAA,gBAC5CtG,OAAA;QACE4G,OAAO,EAAEX,SAAU;QACnBI,SAAS,EAAC,eAAe;QAAAC,QAAA,EAC1B;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACRjF,WAAW,IAAInB,IAAI,iBAClBN,OAAA;QACE4G,OAAO,EAAEA,CAAA,KAAM;UACb;UACA/G,SAAS,CAACyH,UAAU,CAAC;YACnBvF,GAAG,EAAEF,KAAK,CAACE,GAAG;YACdC,QAAQ,EAAEH,KAAK,CAACG,QAAQ;YACxBC,eAAe,EAAEJ,KAAK,CAACI,eAAe;YACtCC,WAAW,EAAEL,KAAK,CAACK,WAAW;YAC9BqF,QAAQ,EAAElG,QAAQ,CAACnB,IAAI,CAACoB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YACzCpB,IAAI;YACJC,QAAQ;YACRgD,IAAI,EAAE1C;UACR,CAAC,CAAC;QACJ,CAAE;QACF4F,SAAS,EAAC,aAAa;QAAAC,QAAA,EACxB;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACT;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,EAGLjF,WAAW,iBACVzB,OAAA;MAAKqG,SAAS,EAAC,2BAA2B;MAAAC,QAAA,gBACxCtG,OAAA;QAAIqG,SAAS,EAAC,wBAAwB;QAAAC,QAAA,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3D1G,OAAA;QAAGqG,SAAS,EAAC,kCAAkC;QAAAC,QAAA,GAAC,eACjC,EAACzE,KAAK,CAACE,GAAG,EAAC,YAAU,EAACF,KAAK,CAACG,QAAQ,EAAC,YACpD;MAAA;QAAAuE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACrG,EAAA,CAlYIJ,UAAqC;EAAA,QACxBH,OAAO;AAAA;AAAA0H,EAAA,GADpBvH,UAAqC;AAoY3C,eAAeA,UAAU;AAAC,IAAAuH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}