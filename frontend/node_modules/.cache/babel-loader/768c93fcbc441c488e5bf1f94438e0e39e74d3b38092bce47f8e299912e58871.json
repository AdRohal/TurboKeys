{"ast":null,"code":"import axios from'axios';import{TestMode,Language}from'../types';import{mockAuthAPI,mockTypingAPI,mockUserAPI}from'./mockApi';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8081/api';const USE_MOCK_API=process.env.REACT_APP_USE_MOCK_API==='true';class APIClient{constructor(){this.client=void 0;this.client=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Add auth token to requests\nthis.client.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;});// Handle auth errors\nthis.client.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){localStorage.removeItem('token');window.location.href='/login';}return Promise.reject(error);});}async handleResponse(response){// Handle wrapped response (with success/data structure)\nif(response.data&&typeof response.data==='object'&&'success'in response.data&&'data'in response.data){const apiResponse=response.data;if(apiResponse.success&&apiResponse.data){return apiResponse.data;}throw new Error(apiResponse.error||apiResponse.message||'API request failed');}// Handle direct response (data returned directly)\nreturn response.data;}// Check if backend is available\nasync isBackendAvailable(){if(USE_MOCK_API)return false;try{await this.client.get('/health',{timeout:2000});return true;}catch{return false;}}// Auth endpoints\nasync login(credentials){if(!(await this.isBackendAvailable())){return mockAuthAPI.login(credentials);}const response=await this.client.post('/auth/login',credentials);return this.handleResponse(response);}async register(userData){if(!(await this.isBackendAvailable())){return mockAuthAPI.register(userData);}const response=await this.client.post('/auth/register',userData);return this.handleResponse(response);}async getCurrentUser(){if(!(await this.isBackendAvailable())){return mockAuthAPI.getCurrentUser();}const response=await this.client.get('/auth/me');return this.handleResponse(response);}// OAuth endpoints\ngetGoogleAuthUrl(){if(USE_MOCK_API)return mockAuthAPI.getGoogleAuthUrl();return`${API_BASE_URL}/auth/oauth2/google`;}getGitHubAuthUrl(){if(USE_MOCK_API)return mockAuthAPI.getGitHubAuthUrl();return`${API_BASE_URL}/auth/oauth2/github`;}// Typing test endpoints\nasync submitTypingTest(result){if(!(await this.isBackendAvailable())){return mockTypingAPI.submitTest(result);}const response=await this.client.post('/typing-tests/submit',result);return this.handleResponse(response);}async getUserTests(limit){if(!(await this.isBackendAvailable())){return mockTypingAPI.getUserTests(limit);}const response=await this.client.get(`/typing-tests/user${limit?`?limit=${limit}`:''}`);return this.handleResponse(response);}async getTypingHistory(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;let duration=arguments.length>2?arguments[2]:undefined;let mode=arguments.length>3?arguments[3]:undefined;let language=arguments.length>4?arguments[4]:undefined;if(!(await this.isBackendAvailable())){return{tests:await mockTypingAPI.getUserTests(limit),totalPages:1,currentPage:1,total:0};}const params=new URLSearchParams({page:page.toString(),limit:limit.toString()});if(duration)params.append('duration',duration.toString());if(mode)params.append('mode',mode);if(language)params.append('language',language);const response=await this.client.get(`/typing-tests/history?${params}`);return this.handleResponse(response);}async getBestScores(){if(!(await this.isBackendAvailable())){return[];}const response=await this.client.get('/typing-tests/best-scores');return this.handleResponse(response);}async getLeaderboard(){let duration=arguments.length>0&&arguments[0]!==undefined?arguments[0]:30;let mode=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'time';let language=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'english';let limit=arguments.length>3&&arguments[3]!==undefined?arguments[3]:50;if(!(await this.isBackendAvailable())){return mockTypingAPI.getLeaderboard(TestMode.THIRTY_SECONDS,limit);}const params=new URLSearchParams({duration:duration.toString(),mode,language,limit:limit.toString()});const response=await this.client.get(`/typing-tests/leaderboard?${params}`);return this.handleResponse(response);}async getTypingStats(){if(!(await this.isBackendAvailable())){return{};}const response=await this.client.get('/typing-tests/stats');return this.handleResponse(response);}// Words endpoints\nasync getWords(){let language=arguments.length>0&&arguments[0]!==undefined?arguments[0]:Language.ENGLISH;let count=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;if(!(await this.isBackendAvailable())){return mockTypingAPI.getWords(language,count);}const response=await this.client.get(`/words?language=${language}&count=${count}`);return this.handleResponse(response);}// User profile endpoints\nasync updateProfile(userData){if(!(await this.isBackendAvailable())){return mockUserAPI.updateProfile(userData);}const response=await this.client.put('/users/profile',userData);return this.handleResponse(response);}async getUserStats(){if(!(await this.isBackendAvailable())){return mockUserAPI.getUserStats();}const response=await this.client.get('/users/stats');return this.handleResponse(response);}// Generic HTTP methods\nasync get(url){return this.client.get(url);}async post(url,data){return this.client.post(url,data);}async put(url,data){return this.client.put(url,data);}async delete(url){return this.client.delete(url);}}export const apiClient=new APIClient();// Convenience exports\nexport const authAPI={login:apiClient.login.bind(apiClient),register:apiClient.register.bind(apiClient),getCurrentUser:apiClient.getCurrentUser.bind(apiClient),getGoogleAuthUrl:apiClient.getGoogleAuthUrl.bind(apiClient),getGitHubAuthUrl:apiClient.getGitHubAuthUrl.bind(apiClient)};export const typingAPI={submitTest:apiClient.submitTypingTest.bind(apiClient),getUserTests:apiClient.getUserTests.bind(apiClient),getHistory:apiClient.getTypingHistory.bind(apiClient),getBestScores:apiClient.getBestScores.bind(apiClient),getLeaderboard:apiClient.getLeaderboard.bind(apiClient),getStats:apiClient.getTypingStats.bind(apiClient),getWords:apiClient.getWords.bind(apiClient)};export const userAPI={updateProfile:apiClient.updateProfile.bind(apiClient),getUserStats:apiClient.getUserStats.bind(apiClient)};export default apiClient;","map":{"version":3,"names":["axios","TestMode","Language","mockAuthAPI","mockTypingAPI","mockUserAPI","API_BASE_URL","process","env","REACT_APP_API_URL","USE_MOCK_API","REACT_APP_USE_MOCK_API","APIClient","constructor","client","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","handleResponse","data","apiResponse","success","Error","message","isBackendAvailable","get","timeout","login","credentials","post","register","userData","getCurrentUser","getGoogleAuthUrl","getGitHubAuthUrl","submitTypingTest","result","submitTest","getUserTests","limit","getTypingHistory","page","arguments","length","undefined","duration","mode","language","tests","totalPages","currentPage","total","params","URLSearchParams","toString","append","getBestScores","getLeaderboard","THIRTY_SECONDS","getTypingStats","getWords","ENGLISH","count","updateProfile","put","getUserStats","url","delete","apiClient","authAPI","bind","typingAPI","getHistory","getStats","userAPI"],"sources":["C:/GitHub/TurboKeys/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\r\nimport { \r\n  User, \r\n  AuthUser, \r\n  LoginRequest, \r\n  RegisterRequest, \r\n  TypingTestResult, \r\n  LeaderboardEntry, \r\n  WordListResponse,\r\n  TestMode,\r\n  Language,\r\n  ApiResponse \r\n} from '../types';\r\nimport { mockAuthAPI, mockTypingAPI, mockUserAPI } from './mockApi';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8081/api';\r\nconst USE_MOCK_API = process.env.REACT_APP_USE_MOCK_API === 'true';\r\n\r\nclass APIClient {\r\n  private client: AxiosInstance;\r\n\r\n  constructor() {\r\n    this.client = axios.create({\r\n      baseURL: API_BASE_URL,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Add auth token to requests\r\n    this.client.interceptors.request.use((config) => {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n      }\r\n      return config;\r\n    });\r\n\r\n    // Handle auth errors\r\n    this.client.interceptors.response.use(\r\n      (response) => response,\r\n      (error) => {\r\n        if (error.response?.status === 401) {\r\n          localStorage.removeItem('token');\r\n          window.location.href = '/login';\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  private async handleResponse<T>(response: AxiosResponse<ApiResponse<T> | T>): Promise<T> {\r\n    // Handle wrapped response (with success/data structure)\r\n    if (response.data && typeof response.data === 'object' && 'success' in response.data && 'data' in response.data) {\r\n      const apiResponse = response.data as ApiResponse<T>;\r\n      if (apiResponse.success && apiResponse.data) {\r\n        return apiResponse.data;\r\n      }\r\n      throw new Error(apiResponse.error || apiResponse.message || 'API request failed');\r\n    }\r\n    \r\n    // Handle direct response (data returned directly)\r\n    return response.data as T;\r\n  }\r\n\r\n  // Check if backend is available\r\n  private async isBackendAvailable(): Promise<boolean> {\r\n    if (USE_MOCK_API) return false;\r\n    \r\n    try {\r\n      await this.client.get('/health', { timeout: 2000 });\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Auth endpoints\r\n  async login(credentials: LoginRequest): Promise<AuthUser> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockAuthAPI.login(credentials);\r\n    }\r\n    \r\n    const response = await this.client.post<ApiResponse<AuthUser>>('/auth/login', credentials);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async register(userData: RegisterRequest): Promise<AuthUser> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockAuthAPI.register(userData);\r\n    }\r\n    \r\n    const response = await this.client.post<ApiResponse<AuthUser>>('/auth/register', userData);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getCurrentUser(): Promise<User> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockAuthAPI.getCurrentUser();\r\n    }\r\n    \r\n    const response = await this.client.get<ApiResponse<User>>('/auth/me');\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  // OAuth endpoints\r\n  getGoogleAuthUrl(): string {\r\n    if (USE_MOCK_API) return mockAuthAPI.getGoogleAuthUrl();\r\n    return `${API_BASE_URL}/auth/oauth2/google`;\r\n  }\r\n\r\n  getGitHubAuthUrl(): string {\r\n    if (USE_MOCK_API) return mockAuthAPI.getGitHubAuthUrl();\r\n    return `${API_BASE_URL}/auth/oauth2/github`;\r\n  }\r\n\r\n  // Typing test endpoints\r\n  async submitTypingTest(result: Omit<TypingTestResult, 'id' | 'userId' | 'completedAt'>): Promise<TypingTestResult> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockTypingAPI.submitTest(result);\r\n    }\r\n    \r\n    const response = await this.client.post<ApiResponse<TypingTestResult>>('/typing-tests/submit', result);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getUserTests(limit?: number): Promise<TypingTestResult[]> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockTypingAPI.getUserTests(limit);\r\n    }\r\n    \r\n    const response = await this.client.get<ApiResponse<TypingTestResult[]>>(`/typing-tests/user${limit ? `?limit=${limit}` : ''}`);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getTypingHistory(page: number = 1, limit: number = 20, duration?: number, mode?: string, language?: string): Promise<{ tests: TypingTestResult[], totalPages: number, currentPage: number, total: number }> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return { tests: await mockTypingAPI.getUserTests(limit), totalPages: 1, currentPage: 1, total: 0 };\r\n    }\r\n    \r\n    const params = new URLSearchParams({ page: page.toString(), limit: limit.toString() });\r\n    if (duration) params.append('duration', duration.toString());\r\n    if (mode) params.append('mode', mode);\r\n    if (language) params.append('language', language);\r\n    \r\n    const response = await this.client.get<ApiResponse<{ tests: TypingTestResult[], totalPages: number, currentPage: number, total: number }>>(`/typing-tests/history?${params}`);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getBestScores(): Promise<any[]> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return [];\r\n    }\r\n    \r\n    const response = await this.client.get<ApiResponse<any[]>>('/typing-tests/best-scores');\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getLeaderboard(duration: number = 30, mode: string = 'time', language: string = 'english', limit: number = 50): Promise<LeaderboardEntry[]> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockTypingAPI.getLeaderboard(TestMode.THIRTY_SECONDS, limit);\r\n    }\r\n    \r\n    const params = new URLSearchParams({ \r\n      duration: duration.toString(), \r\n      mode, \r\n      language, \r\n      limit: limit.toString() \r\n    });\r\n    \r\n    const response = await this.client.get<ApiResponse<LeaderboardEntry[]>>(`/typing-tests/leaderboard?${params}`);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getTypingStats(): Promise<any> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return {};\r\n    }\r\n    \r\n    const response = await this.client.get<ApiResponse<any>>('/typing-tests/stats');\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  // Words endpoints\r\n  async getWords(language: Language = Language.ENGLISH, count: number = 50): Promise<WordListResponse> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockTypingAPI.getWords(language, count);\r\n    }\r\n    \r\n    const response = await this.client.get<ApiResponse<WordListResponse>>(`/words?language=${language}&count=${count}`);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  // User profile endpoints\r\n  async updateProfile(userData: Partial<User>): Promise<User> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockUserAPI.updateProfile(userData);\r\n    }\r\n    \r\n    const response = await this.client.put<ApiResponse<User>>('/users/profile', userData);\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getUserStats(): Promise<any> {\r\n    if (!(await this.isBackendAvailable())) {\r\n      return mockUserAPI.getUserStats();\r\n    }\r\n    \r\n    const response = await this.client.get<ApiResponse<any>>('/users/stats');\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  // Generic HTTP methods\r\n  async get<T = any>(url: string): Promise<AxiosResponse<T>> {\r\n    return this.client.get(url);\r\n  }\r\n\r\n  async post<T = any>(url: string, data?: any): Promise<AxiosResponse<T>> {\r\n    return this.client.post(url, data);\r\n  }\r\n\r\n  async put<T = any>(url: string, data?: any): Promise<AxiosResponse<T>> {\r\n    return this.client.put(url, data);\r\n  }\r\n\r\n  async delete<T = any>(url: string): Promise<AxiosResponse<T>> {\r\n    return this.client.delete(url);\r\n  }\r\n}\r\n\r\nexport const apiClient = new APIClient();\r\n\r\n// Convenience exports\r\nexport const authAPI = {\r\n  login: apiClient.login.bind(apiClient),\r\n  register: apiClient.register.bind(apiClient),\r\n  getCurrentUser: apiClient.getCurrentUser.bind(apiClient),\r\n  getGoogleAuthUrl: apiClient.getGoogleAuthUrl.bind(apiClient),\r\n  getGitHubAuthUrl: apiClient.getGitHubAuthUrl.bind(apiClient),\r\n};\r\n\r\nexport const typingAPI = {\r\n  submitTest: apiClient.submitTypingTest.bind(apiClient),\r\n  getUserTests: apiClient.getUserTests.bind(apiClient),\r\n  getHistory: apiClient.getTypingHistory.bind(apiClient),\r\n  getBestScores: apiClient.getBestScores.bind(apiClient),\r\n  getLeaderboard: apiClient.getLeaderboard.bind(apiClient),\r\n  getStats: apiClient.getTypingStats.bind(apiClient),\r\n  getWords: apiClient.getWords.bind(apiClient),\r\n};\r\n\r\nexport const userAPI = {\r\n  updateProfile: apiClient.updateProfile.bind(apiClient),\r\n  getUserStats: apiClient.getUserStats.bind(apiClient),\r\n};\r\n\r\nexport default apiClient;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}